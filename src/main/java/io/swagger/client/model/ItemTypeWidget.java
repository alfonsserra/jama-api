/*
 * Jama REST API
 * This is the documentation for the Jama REST API.
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ItemTypeWidget
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-03-07T18:50:05.195+01:00")
public class ItemTypeWidget {
  /**
   * Gets or Sets name
   */
  @JsonAdapter(NameEnum.Adapter.class)
  public enum NameEnum {
    ACTIVITIES("ACTIVITIES"),
    
    RELATIONSHIPS("RELATIONSHIPS"),
    
    SYNCHRONIZED_ITEMS("SYNCHRONIZED_ITEMS"),
    
    ATTACHMENTS("ATTACHMENTS"),
    
    URLS("URLS"),
    
    TAGS("TAGS"),
    
    HISTORY("HISTORY"),
    
    TEST_HISTORY_OLD("TEST_HISTORY_OLD"),
    
    SELENIUM("SELENIUM"),
    
    CHANGE_REQUESTS("CHANGE_REQUESTS"),
    
    FOLDER_LIST("FOLDER_LIST"),
    
    INSIDE_CHANGE_REQUEST("INSIDE_CHANGE_REQUEST"),
    
    ITEMS_WITH_ATTACHMENT("ITEMS_WITH_ATTACHMENT"),
    
    TEST_RUNS("TEST_RUNS"),
    
    TEST_CASE("TEST_CASE");

    private String value;

    NameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameEnum fromValue(String text) {
      for (NameEnum b : NameEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<NameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return NameEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("name")
  private NameEnum name = null;

  @SerializedName("synchronize")
  private Boolean synchronize = null;

  public ItemTypeWidget name(NameEnum name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "")
  public NameEnum getName() {
    return name;
  }

  public void setName(NameEnum name) {
    this.name = name;
  }

  public ItemTypeWidget synchronize(Boolean synchronize) {
    this.synchronize = synchronize;
    return this;
  }

   /**
   * Get synchronize
   * @return synchronize
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isSynchronize() {
    return synchronize;
  }

  public void setSynchronize(Boolean synchronize) {
    this.synchronize = synchronize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemTypeWidget itemTypeWidget = (ItemTypeWidget) o;
    return Objects.equals(this.name, itemTypeWidget.name) &&
        Objects.equals(this.synchronize, itemTypeWidget.synchronize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, synchronize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemTypeWidget {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    synchronize: ").append(toIndentedString(synchronize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

