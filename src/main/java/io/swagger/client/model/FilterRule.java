/*
 * Jama REST API
 * This is the documentation for the Jama REST API.
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.FilterField;
import io.swagger.client.model.FilterQuery;
import io.swagger.client.model.FilterRule;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * FilterRule
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-03-07T18:50:05.195+01:00")
public class FilterRule {
  @SerializedName("field")
  private FilterField field = null;

  /**
   * Gets or Sets operator
   */
  @JsonAdapter(OperatorEnum.Adapter.class)
  public enum OperatorEnum {
    GROUP_OR("GROUP_OR"),
    
    GROUP_AND("GROUP_AND"),
    
    OR("OR"),
    
    AND("AND"),
    
    EQUALS("EQUALS"),
    
    EQUALS_DATE("EQUALS_DATE"),
    
    EQUALS_MULTI("EQUALS_MULTI"),
    
    NOT_EQUALS("NOT_EQUALS"),
    
    NOT_EQUALS_DATE("NOT_EQUALS_DATE"),
    
    NOT_EQUALS_MULTI("NOT_EQUALS_MULTI"),
    
    GREATER_THAN("GREATER_THAN"),
    
    GREATER_THAN_DATE("GREATER_THAN_DATE"),
    
    LESS_THAN("LESS_THAN"),
    
    LESS_THAN_DATE("LESS_THAN_DATE"),
    
    IN("IN"),
    
    IS_TRUE("IS_TRUE"),
    
    IS_FALSE("IS_FALSE"),
    
    CONTAINS("CONTAINS"),
    
    CONTAINS_WORD("CONTAINS_WORD"),
    
    NOT_CONTAINS("NOT_CONTAINS"),
    
    NOT_CONTAINS_WORD("NOT_CONTAINS_WORD"),
    
    IS_ASSOCIATED_ITEM("IS_ASSOCIATED_ITEM"),
    
    IS_ASSOCIATED_SUSPECT_ITEM("IS_ASSOCIATED_SUSPECT_ITEM"),
    
    IS_ASSOCIATED_NOT_SUSPECT_ITEM("IS_ASSOCIATED_NOT_SUSPECT_ITEM"),
    
    IS_BETWEEN("IS_BETWEEN"),
    
    HAS_ALL("HAS_ALL"),
    
    HAS_NONE("HAS_NONE"),
    
    IS_DIRECTLY_UNDER("IS_DIRECTLY_UNDER"),
    
    IS_UNDER("IS_UNDER"),
    
    IS_CURRENT_USER("IS_CURRENT_USER"),
    
    IS_EMPTY("IS_EMPTY"),
    
    IS_NOT_EMPTY("IS_NOT_EMPTY"),
    
    IS_NOT_DIRECTLY_UNDER("IS_NOT_DIRECTLY_UNDER"),
    
    IS_UNDER_OR_EQUAL("IS_UNDER_OR_EQUAL"),
    
    IS_NOT_UNDER("IS_NOT_UNDER"),
    
    LOCATION_IS("LOCATION_IS"),
    
    TEST_CENTER_RELATE("TEST_CENTER_RELATE"),
    
    SHARED_WITH("SHARED_WITH"),
    
    NOT_SHARED_WITH("NOT_SHARED_WITH"),
    
    IS_WITHIN_LAST("IS_WITHIN_LAST");

    private String value;

    OperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperatorEnum fromValue(String text) {
      for (OperatorEnum b : OperatorEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OperatorEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("operator")
  private OperatorEnum operator = null;

  @SerializedName("values")
  private List<String> values = new ArrayList<String>();

  @SerializedName("itemType")
  private Integer itemType = null;

  @SerializedName("subQuery")
  private FilterQuery subQuery = null;

  @SerializedName("rules")
  private List<FilterRule> rules = new ArrayList<FilterRule>();

  public FilterRule field(FilterField field) {
    this.field = field;
    return this;
  }

   /**
   * Get field
   * @return field
  **/
  @ApiModelProperty(required = true, value = "")
  public FilterField getField() {
    return field;
  }

  public void setField(FilterField field) {
    this.field = field;
  }

  public FilterRule operator(OperatorEnum operator) {
    this.operator = operator;
    return this;
  }

   /**
   * Get operator
   * @return operator
  **/
  @ApiModelProperty(required = true, value = "")
  public OperatorEnum getOperator() {
    return operator;
  }

  public void setOperator(OperatorEnum operator) {
    this.operator = operator;
  }

  public FilterRule values(List<String> values) {
    this.values = values;
    return this;
  }

  public FilterRule addValuesItem(String valuesItem) {
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Get values
   * @return values
  **/
  @ApiModelProperty(required = true, value = "")
  public List<String> getValues() {
    return values;
  }

  public void setValues(List<String> values) {
    this.values = values;
  }

  public FilterRule itemType(Integer itemType) {
    this.itemType = itemType;
    return this;
  }

   /**
   * ID of an item type
   * @return itemType
  **/
  @ApiModelProperty(required = true, value = "ID of an item type")
  public Integer getItemType() {
    return itemType;
  }

  public void setItemType(Integer itemType) {
    this.itemType = itemType;
  }

  public FilterRule subQuery(FilterQuery subQuery) {
    this.subQuery = subQuery;
    return this;
  }

   /**
   * Get subQuery
   * @return subQuery
  **/
  @ApiModelProperty(required = true, value = "")
  public FilterQuery getSubQuery() {
    return subQuery;
  }

  public void setSubQuery(FilterQuery subQuery) {
    this.subQuery = subQuery;
  }

  public FilterRule rules(List<FilterRule> rules) {
    this.rules = rules;
    return this;
  }

  public FilterRule addRulesItem(FilterRule rulesItem) {
    this.rules.add(rulesItem);
    return this;
  }

   /**
   * Get rules
   * @return rules
  **/
  @ApiModelProperty(required = true, value = "")
  public List<FilterRule> getRules() {
    return rules;
  }

  public void setRules(List<FilterRule> rules) {
    this.rules = rules;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterRule filterRule = (FilterRule) o;
    return Objects.equals(this.field, filterRule.field) &&
        Objects.equals(this.operator, filterRule.operator) &&
        Objects.equals(this.values, filterRule.values) &&
        Objects.equals(this.itemType, filterRule.itemType) &&
        Objects.equals(this.subQuery, filterRule.subQuery) &&
        Objects.equals(this.rules, filterRule.rules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(field, operator, values, itemType, subQuery, rules);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterRule {\n");
    
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    subQuery: ").append(toIndentedString(subQuery)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

