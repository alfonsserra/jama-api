/*
 * Jama REST API
 * This is the documentation for the Jama REST API.
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.TestRunGenerationConfig;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * RequestTestCycle
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-03-07T18:50:05.195+01:00")
public class RequestTestCycle {
  @SerializedName("fields")
  private Map<String, Object> fields = new HashMap<String, Object>();

  @SerializedName("testRunGenerationConfig")
  private TestRunGenerationConfig testRunGenerationConfig = null;

  public RequestTestCycle fields(Map<String, Object> fields) {
    this.fields = fields;
    return this;
  }

  public RequestTestCycle putFieldsItem(String key, Object fieldsItem) {
    this.fields.put(key, fieldsItem);
    return this;
  }

   /**
   * A map of field names to field values e.g. {\&quot;name\&quot;:\&quot;Sample Item\&quot;, \&quot;startDate\&quot;: \&quot;2015-01-01\&quot;, \&quot;endDate\&quot;: \&quot;2015-01-15\&quot;} Note: RequestTestCycle requires name, startDate, and endDate. startDate and endDate are formatted with &#39;yyyy-mm-dd&#39;
   * @return fields
  **/
  @ApiModelProperty(required = true, value = "A map of field names to field values e.g. {\"name\":\"Sample Item\", \"startDate\": \"2015-01-01\", \"endDate\": \"2015-01-15\"} Note: RequestTestCycle requires name, startDate, and endDate. startDate and endDate are formatted with 'yyyy-mm-dd'")
  public Map<String, Object> getFields() {
    return fields;
  }

  public void setFields(Map<String, Object> fields) {
    this.fields = fields;
  }

  public RequestTestCycle testRunGenerationConfig(TestRunGenerationConfig testRunGenerationConfig) {
    this.testRunGenerationConfig = testRunGenerationConfig;
    return this;
  }

   /**
   * Settings for how test runs will be generated in this test cycle
   * @return testRunGenerationConfig
  **/
  @ApiModelProperty(required = true, value = "Settings for how test runs will be generated in this test cycle")
  public TestRunGenerationConfig getTestRunGenerationConfig() {
    return testRunGenerationConfig;
  }

  public void setTestRunGenerationConfig(TestRunGenerationConfig testRunGenerationConfig) {
    this.testRunGenerationConfig = testRunGenerationConfig;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestTestCycle requestTestCycle = (RequestTestCycle) o;
    return Objects.equals(this.fields, requestTestCycle.fields) &&
        Objects.equals(this.testRunGenerationConfig, requestTestCycle.testRunGenerationConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fields, testRunGenerationConfig);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestTestCycle {\n");
    
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    testRunGenerationConfig: ").append(toIndentedString(testRunGenerationConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

