/*
 * Jama REST API
 * This is the documentation for the Jama REST API.
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * FilterField
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-03-07T18:50:05.195+01:00")
public class FilterField {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("display")
  private String display = null;

  /**
   * Gets or Sets fieldDataType
   */
  @JsonAdapter(FieldDataTypeEnum.Adapter.class)
  public enum FieldDataTypeEnum {
    INTEGER("INTEGER"),
    
    TEXT_FIELD("TEXT_FIELD"),
    
    TEXT_BOX("TEXT_BOX"),
    
    PICKLIST("PICKLIST"),
    
    DATE("DATE"),
    
    USER("USER"),
    
    RELEASE("RELEASE"),
    
    BOOLEAN("BOOLEAN"),
    
    GROUP("GROUP"),
    
    MULTI_SELECT("MULTI_SELECT"),
    
    ITEM_OF_TYPE("ITEM_OF_TYPE"),
    
    URL("URL"),
    
    ITEM_TYPE("ITEM_TYPE"),
    
    PROJECT("PROJECT"),
    
    STEPS("STEPS"),
    
    TIME("TIME"),
    
    TEST_RUN_STATUS("TEST_RUN_STATUS"),
    
    ITEM_OF_CATEGORY("ITEM_OF_CATEGORY"),
    
    TEST_CASE_STATUS("TEST_CASE_STATUS"),
    
    ACTIONS("ACTIONS"),
    
    TAG("TAG"),
    
    DOWNSTREAM_RELATIONSHIP("DOWNSTREAM_RELATIONSHIP"),
    
    NO_DOWNSTREAM_RELATIONSHIP("NO_DOWNSTREAM_RELATIONSHIP"),
    
    UPSTREAM_RELATIONSHIP("UPSTREAM_RELATIONSHIP"),
    
    NO_UPSTREAM_RELATIONSHIP("NO_UPSTREAM_RELATIONSHIP"),
    
    CHANGE_REQUEST("CHANGE_REQUEST"),
    
    LOCATION("LOCATION"),
    
    QUERY_PARSER("QUERY_PARSER"),
    
    ADHOC("ADHOC"),
    
    HAS_TEST_CENTER_ITEM("HAS_TEST_CENTER_ITEM"),
    
    GLOBAL_ID("GLOBAL_ID");

    private String value;

    FieldDataTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FieldDataTypeEnum fromValue(String text) {
      for (FieldDataTypeEnum b : FieldDataTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FieldDataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FieldDataTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FieldDataTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FieldDataTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("fieldDataType")
  private FieldDataTypeEnum fieldDataType = null;

  public FilterField id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public FilterField name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public FilterField display(String display) {
    this.display = display;
    return this;
  }

   /**
   * Get display
   * @return display
  **/
  @ApiModelProperty(required = true, value = "")
  public String getDisplay() {
    return display;
  }

  public void setDisplay(String display) {
    this.display = display;
  }

  public FilterField fieldDataType(FieldDataTypeEnum fieldDataType) {
    this.fieldDataType = fieldDataType;
    return this;
  }

   /**
   * Get fieldDataType
   * @return fieldDataType
  **/
  @ApiModelProperty(required = true, value = "")
  public FieldDataTypeEnum getFieldDataType() {
    return fieldDataType;
  }

  public void setFieldDataType(FieldDataTypeEnum fieldDataType) {
    this.fieldDataType = fieldDataType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterField filterField = (FilterField) o;
    return Objects.equals(this.id, filterField.id) &&
        Objects.equals(this.name, filterField.name) &&
        Objects.equals(this.display, filterField.display) &&
        Objects.equals(this.fieldDataType, filterField.fieldDataType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, display, fieldDataType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterField {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    fieldDataType: ").append(toIndentedString(fieldDataType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

