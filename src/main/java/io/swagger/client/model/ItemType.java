/*
 * Jama REST API
 * This is the documentation for the Jama REST API.
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.ItemTypeField;
import io.swagger.client.model.ItemTypeWidget;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ItemType
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-03-07T18:50:05.195+01:00")
public class ItemType {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("typeKey")
  private String typeKey = null;

  @SerializedName("display")
  private String display = null;

  @SerializedName("displayPlural")
  private String displayPlural = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("image")
  private String image = null;

  /**
   * Gets or Sets category
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    CORE("CORE"),
    
    ATTACHMENT("ATTACHMENT"),
    
    COMPONENT("COMPONENT"),
    
    SET("SET"),
    
    SECTION("SECTION"),
    
    TEXT("TEXT"),
    
    TEST_PLAN("TEST_PLAN"),
    
    TEST_CYCLE("TEST_CYCLE"),
    
    TEST_RUN("TEST_RUN"),
    
    TEST_CASE("TEST_CASE"),
    
    PROGRESSABLE("PROGRESSABLE");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String text) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CategoryEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("category")
  private CategoryEnum category = null;

  @SerializedName("widgets")
  private List<ItemTypeWidget> widgets = new ArrayList<ItemTypeWidget>();

  @SerializedName("fields")
  private List<ItemTypeField> fields = new ArrayList<ItemTypeField>();

  @SerializedName("system")
  private Boolean system = null;

  public ItemType id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public ItemType typeKey(String typeKey) {
    this.typeKey = typeKey;
    return this;
  }

   /**
   * Get typeKey
   * @return typeKey
  **/
  @ApiModelProperty(required = true, value = "")
  public String getTypeKey() {
    return typeKey;
  }

  public void setTypeKey(String typeKey) {
    this.typeKey = typeKey;
  }

  public ItemType display(String display) {
    this.display = display;
    return this;
  }

   /**
   * Get display
   * @return display
  **/
  @ApiModelProperty(required = true, value = "")
  public String getDisplay() {
    return display;
  }

  public void setDisplay(String display) {
    this.display = display;
  }

  public ItemType displayPlural(String displayPlural) {
    this.displayPlural = displayPlural;
    return this;
  }

   /**
   * Get displayPlural
   * @return displayPlural
  **/
  @ApiModelProperty(required = true, value = "")
  public String getDisplayPlural() {
    return displayPlural;
  }

  public void setDisplayPlural(String displayPlural) {
    this.displayPlural = displayPlural;
  }

  public ItemType description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(required = true, value = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ItemType image(String image) {
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @ApiModelProperty(required = true, value = "")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public ItemType category(CategoryEnum category) {
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @ApiModelProperty(required = true, value = "")
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }

  public ItemType widgets(List<ItemTypeWidget> widgets) {
    this.widgets = widgets;
    return this;
  }

  public ItemType addWidgetsItem(ItemTypeWidget widgetsItem) {
    this.widgets.add(widgetsItem);
    return this;
  }

   /**
   * Get widgets
   * @return widgets
  **/
  @ApiModelProperty(required = true, value = "")
  public List<ItemTypeWidget> getWidgets() {
    return widgets;
  }

  public void setWidgets(List<ItemTypeWidget> widgets) {
    this.widgets = widgets;
  }

  public ItemType fields(List<ItemTypeField> fields) {
    this.fields = fields;
    return this;
  }

  public ItemType addFieldsItem(ItemTypeField fieldsItem) {
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  @ApiModelProperty(required = true, value = "")
  public List<ItemTypeField> getFields() {
    return fields;
  }

  public void setFields(List<ItemTypeField> fields) {
    this.fields = fields;
  }

  public ItemType system(Boolean system) {
    this.system = system;
    return this;
  }

   /**
   * Get system
   * @return system
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isSystem() {
    return system;
  }

  public void setSystem(Boolean system) {
    this.system = system;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemType itemType = (ItemType) o;
    return Objects.equals(this.id, itemType.id) &&
        Objects.equals(this.typeKey, itemType.typeKey) &&
        Objects.equals(this.display, itemType.display) &&
        Objects.equals(this.displayPlural, itemType.displayPlural) &&
        Objects.equals(this.description, itemType.description) &&
        Objects.equals(this.image, itemType.image) &&
        Objects.equals(this.category, itemType.category) &&
        Objects.equals(this.widgets, itemType.widgets) &&
        Objects.equals(this.fields, itemType.fields) &&
        Objects.equals(this.system, itemType.system);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, typeKey, display, displayPlural, description, image, category, widgets, fields, system);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemType {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    typeKey: ").append(toIndentedString(typeKey)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    displayPlural: ").append(toIndentedString(displayPlural)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    widgets: ").append(toIndentedString(widgets)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

