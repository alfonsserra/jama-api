/*
 * Jama REST API
 * This is the documentation for the Jama REST API.
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * RequestUser
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-03-07T18:50:05.195+01:00")
public class RequestUser {
  @SerializedName("username")
  private String username = null;

  @SerializedName("password")
  private String password = null;

  @SerializedName("firstName")
  private String firstName = null;

  @SerializedName("lastName")
  private String lastName = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("phone")
  private String phone = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("location")
  private String location = null;

  /**
   * Required when creating a new user (POST). Optional on update (PUT)
   */
  @JsonAdapter(LicenseTypeEnum.Adapter.class)
  public enum LicenseTypeEnum {
    NAMED("NAMED"),
    
    FLOATING("FLOATING"),
    
    STAKEHOLDER("STAKEHOLDER"),
    
    FLOATING_COLLABORATOR("FLOATING_COLLABORATOR"),
    
    RESERVED_COLLABORATOR("RESERVED_COLLABORATOR"),
    
    FLOATING_REVIEWER("FLOATING_REVIEWER"),
    
    RESERVED_REVIEWER("RESERVED_REVIEWER"),
    
    NAMED_REVIEWER("NAMED_REVIEWER"),
    
    EXPIRING_TRIAL("EXPIRING_TRIAL"),
    
    INACTIVE("INACTIVE");

    private String value;

    LicenseTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LicenseTypeEnum fromValue(String text) {
      for (LicenseTypeEnum b : LicenseTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LicenseTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LicenseTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LicenseTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LicenseTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("licenseType")
  private LicenseTypeEnum licenseType = null;

  public RequestUser username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Required when creating a new user (POST). Optional on update (PUT)
   * @return username
  **/
  @ApiModelProperty(required = true, value = "Required when creating a new user (POST). Optional on update (PUT)")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public RequestUser password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Required when creating a new user (POST). Not valid on update (PUT)
   * @return password
  **/
  @ApiModelProperty(required = true, value = "Required when creating a new user (POST). Not valid on update (PUT)")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public RequestUser firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

   /**
   * Required when creating a new user (POST). Optional on update (PUT)
   * @return firstName
  **/
  @ApiModelProperty(required = true, value = "Required when creating a new user (POST). Optional on update (PUT)")
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  public RequestUser lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

   /**
   * Required when creating a new user (POST). Optional on update (PUT)
   * @return lastName
  **/
  @ApiModelProperty(required = true, value = "Required when creating a new user (POST). Optional on update (PUT)")
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public RequestUser email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Required when creating a new user (POST). Optional on update (PUT)
   * @return email
  **/
  @ApiModelProperty(required = true, value = "Required when creating a new user (POST). Optional on update (PUT)")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public RequestUser phone(String phone) {
    this.phone = phone;
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @ApiModelProperty(value = "")
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }

  public RequestUser title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @ApiModelProperty(value = "")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public RequestUser location(String location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @ApiModelProperty(value = "")
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public RequestUser licenseType(LicenseTypeEnum licenseType) {
    this.licenseType = licenseType;
    return this;
  }

   /**
   * Required when creating a new user (POST). Optional on update (PUT)
   * @return licenseType
  **/
  @ApiModelProperty(required = true, value = "Required when creating a new user (POST). Optional on update (PUT)")
  public LicenseTypeEnum getLicenseType() {
    return licenseType;
  }

  public void setLicenseType(LicenseTypeEnum licenseType) {
    this.licenseType = licenseType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestUser requestUser = (RequestUser) o;
    return Objects.equals(this.username, requestUser.username) &&
        Objects.equals(this.password, requestUser.password) &&
        Objects.equals(this.firstName, requestUser.firstName) &&
        Objects.equals(this.lastName, requestUser.lastName) &&
        Objects.equals(this.email, requestUser.email) &&
        Objects.equals(this.phone, requestUser.phone) &&
        Objects.equals(this.title, requestUser.title) &&
        Objects.equals(this.location, requestUser.location) &&
        Objects.equals(this.licenseType, requestUser.licenseType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(username, password, firstName, lastName, email, phone, title, location, licenseType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestUser {\n");
    
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    licenseType: ").append(toIndentedString(licenseType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

