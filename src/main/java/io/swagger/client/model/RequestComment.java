/*
 * Jama REST API
 * This is the documentation for the Jama REST API.
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.RequestCommentBody;
import io.swagger.client.model.RequestCommentLocation;
import java.io.IOException;

/**
 * RequestComment
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-03-07T18:50:05.195+01:00")
public class RequestComment {
  @SerializedName("inReplyTo")
  private Integer inReplyTo = null;

  @SerializedName("body")
  private RequestCommentBody body = null;

  /**
   * Gets or Sets commentType
   */
  @JsonAdapter(CommentTypeEnum.Adapter.class)
  public enum CommentTypeEnum {
    GENERAL("GENERAL"),
    
    QUESTION("QUESTION"),
    
    PROPOSED_CHANGE("PROPOSED_CHANGE"),
    
    ACCEPTED_COMMENT("ACCEPTED_COMMENT"),
    
    REJECTED_COMMENT("REJECTED_COMMENT"),
    
    ISSUE("ISSUE"),
    
    DECISION("DECISION"),
    
    DECISION_REQUEST("DECISION_REQUEST");

    private String value;

    CommentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CommentTypeEnum fromValue(String text) {
      for (CommentTypeEnum b : CommentTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CommentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CommentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CommentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CommentTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("commentType")
  private CommentTypeEnum commentType = null;

  @SerializedName("location")
  private RequestCommentLocation location = null;

  public RequestComment inReplyTo(Integer inReplyTo) {
    this.inReplyTo = inReplyTo;
    return this;
  }

   /**
   * ID of a comment
   * @return inReplyTo
  **/
  @ApiModelProperty(value = "ID of a comment")
  public Integer getInReplyTo() {
    return inReplyTo;
  }

  public void setInReplyTo(Integer inReplyTo) {
    this.inReplyTo = inReplyTo;
  }

  public RequestComment body(RequestCommentBody body) {
    this.body = body;
    return this;
  }

   /**
   * Get body
   * @return body
  **/
  @ApiModelProperty(required = true, value = "")
  public RequestCommentBody getBody() {
    return body;
  }

  public void setBody(RequestCommentBody body) {
    this.body = body;
  }

  public RequestComment commentType(CommentTypeEnum commentType) {
    this.commentType = commentType;
    return this;
  }

   /**
   * Get commentType
   * @return commentType
  **/
  @ApiModelProperty(value = "")
  public CommentTypeEnum getCommentType() {
    return commentType;
  }

  public void setCommentType(CommentTypeEnum commentType) {
    this.commentType = commentType;
  }

  public RequestComment location(RequestCommentLocation location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @ApiModelProperty(value = "")
  public RequestCommentLocation getLocation() {
    return location;
  }

  public void setLocation(RequestCommentLocation location) {
    this.location = location;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestComment requestComment = (RequestComment) o;
    return Objects.equals(this.inReplyTo, requestComment.inReplyTo) &&
        Objects.equals(this.body, requestComment.body) &&
        Objects.equals(this.commentType, requestComment.commentType) &&
        Objects.equals(this.location, requestComment.location);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inReplyTo, body, commentType, location);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestComment {\n");
    
    sb.append("    inReplyTo: ").append(toIndentedString(inReplyTo)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    commentType: ").append(toIndentedString(commentType)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

