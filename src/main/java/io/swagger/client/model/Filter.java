/*
 * Jama REST API
 * This is the documentation for the Jama REST API.
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.FilterQuery;
import java.io.IOException;

/**
 * Filter
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-03-07T18:50:05.195+01:00")
public class Filter {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("author")
  private Integer author = null;

  /**
   * Gets or Sets projectScope
   */
  @JsonAdapter(ProjectScopeEnum.Adapter.class)
  public enum ProjectScopeEnum {
    ALL("ALL"),
    
    CURRENT("CURRENT"),
    
    SPECIFIED("SPECIFIED");

    private String value;

    ProjectScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProjectScopeEnum fromValue(String text) {
      for (ProjectScopeEnum b : ProjectScopeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ProjectScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProjectScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProjectScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ProjectScopeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("projectScope")
  private ProjectScopeEnum projectScope = null;

  @SerializedName("specifiedProject")
  private Integer specifiedProject = null;

  @SerializedName("filterQuery")
  private FilterQuery filterQuery = null;

  @SerializedName("public")
  private Boolean _public = null;

  public Filter id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public Filter name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Filter author(Integer author) {
    this.author = author;
    return this;
  }

   /**
   * ID of a user
   * @return author
  **/
  @ApiModelProperty(required = true, value = "ID of a user")
  public Integer getAuthor() {
    return author;
  }

  public void setAuthor(Integer author) {
    this.author = author;
  }

  public Filter projectScope(ProjectScopeEnum projectScope) {
    this.projectScope = projectScope;
    return this;
  }

   /**
   * Get projectScope
   * @return projectScope
  **/
  @ApiModelProperty(required = true, value = "")
  public ProjectScopeEnum getProjectScope() {
    return projectScope;
  }

  public void setProjectScope(ProjectScopeEnum projectScope) {
    this.projectScope = projectScope;
  }

  public Filter specifiedProject(Integer specifiedProject) {
    this.specifiedProject = specifiedProject;
    return this;
  }

   /**
   * ID of a project
   * @return specifiedProject
  **/
  @ApiModelProperty(required = true, value = "ID of a project")
  public Integer getSpecifiedProject() {
    return specifiedProject;
  }

  public void setSpecifiedProject(Integer specifiedProject) {
    this.specifiedProject = specifiedProject;
  }

  public Filter filterQuery(FilterQuery filterQuery) {
    this.filterQuery = filterQuery;
    return this;
  }

   /**
   * Get filterQuery
   * @return filterQuery
  **/
  @ApiModelProperty(required = true, value = "")
  public FilterQuery getFilterQuery() {
    return filterQuery;
  }

  public void setFilterQuery(FilterQuery filterQuery) {
    this.filterQuery = filterQuery;
  }

  public Filter _public(Boolean _public) {
    this._public = _public;
    return this;
  }

   /**
   * Get _public
   * @return _public
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isPublic() {
    return _public;
  }

  public void setPublic(Boolean _public) {
    this._public = _public;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Filter filter = (Filter) o;
    return Objects.equals(this.id, filter.id) &&
        Objects.equals(this.name, filter.name) &&
        Objects.equals(this.author, filter.author) &&
        Objects.equals(this.projectScope, filter.projectScope) &&
        Objects.equals(this.specifiedProject, filter.specifiedProject) &&
        Objects.equals(this.filterQuery, filter.filterQuery) &&
        Objects.equals(this._public, filter._public);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, author, projectScope, specifiedProject, filterQuery, _public);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Filter {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    projectScope: ").append(toIndentedString(projectScope)).append("\n");
    sb.append("    specifiedProject: ").append(toIndentedString(specifiedProject)).append("\n");
    sb.append("    filterQuery: ").append(toIndentedString(filterQuery)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

