/*
 * Jama REST API
 * This is the documentation for the Jama REST API.
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AbstractRestResponse;
import io.swagger.client.model.AttachmentDataWrapper;
import io.swagger.client.model.CommentDataListWrapper;
import io.swagger.client.model.FormDataMultiPart;
import io.swagger.client.model.LockDataWrapper;
import io.swagger.client.model.RequestLock;
import io.swagger.client.model.VersionDataListWrapper;
import io.swagger.client.model.VersionDataWrapper;
import io.swagger.client.model.VersionedAttachmentDataWrapper;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AttachmentsApi {
    private ApiClient apiClient;

    public AttachmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AttachmentsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for downloadFile
     * @param attachmentId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadFileCall(Integer attachmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/attachments/{attachmentId}/file"
            .replaceAll("\\{" + "attachmentId" + "\\}", apiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call downloadFileValidateBeforeCall(Integer attachmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling downloadFile(Async)");
        }
        
        
        com.squareup.okhttp.Call call = downloadFileCall(attachmentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Download attachment file from the attachment with the specified ID
     * 
     * @param attachmentId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void downloadFile(Integer attachmentId) throws ApiException {
        downloadFileWithHttpInfo(attachmentId);
    }

    /**
     * Download attachment file from the attachment with the specified ID
     * 
     * @param attachmentId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> downloadFileWithHttpInfo(Integer attachmentId) throws ApiException {
        com.squareup.okhttp.Call call = downloadFileValidateBeforeCall(attachmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Download attachment file from the attachment with the specified ID (asynchronously)
     * 
     * @param attachmentId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadFileAsync(Integer attachmentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadFileValidateBeforeCall(attachmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAttachmentItem
     * @param attachmentId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAttachmentItemCall(Integer attachmentId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/attachments/{attachmentId}"
            .replaceAll("\\{" + "attachmentId" + "\\}", apiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAttachmentItemValidateBeforeCall(Integer attachmentId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling getAttachmentItem(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAttachmentItemCall(attachmentId, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the attachment with the specified ID
     * 
     * @param attachmentId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return AttachmentDataWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AttachmentDataWrapper getAttachmentItem(Integer attachmentId, List<String> include) throws ApiException {
        ApiResponse<AttachmentDataWrapper> resp = getAttachmentItemWithHttpInfo(attachmentId, include);
        return resp.getData();
    }

    /**
     * Get the attachment with the specified ID
     * 
     * @param attachmentId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;AttachmentDataWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AttachmentDataWrapper> getAttachmentItemWithHttpInfo(Integer attachmentId, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getAttachmentItemValidateBeforeCall(attachmentId, include, null, null);
        Type localVarReturnType = new TypeToken<AttachmentDataWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the attachment with the specified ID (asynchronously)
     * 
     * @param attachmentId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAttachmentItemAsync(Integer attachmentId, List<String> include, final ApiCallback<AttachmentDataWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAttachmentItemValidateBeforeCall(attachmentId, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AttachmentDataWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemComments
     * @param attachmentId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param rootCommentsOnly  (optional, default to false)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemCommentsCall(Integer attachmentId, Integer startAt, Integer maxResults, Boolean rootCommentsOnly, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/attachments/{attachmentId}/comments"
            .replaceAll("\\{" + "attachmentId" + "\\}", apiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (rootCommentsOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rootCommentsOnly", rootCommentsOnly));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemCommentsValidateBeforeCall(Integer attachmentId, Integer startAt, Integer maxResults, Boolean rootCommentsOnly, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling getItemComments(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getItemCommentsCall(attachmentId, startAt, maxResults, rootCommentsOnly, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all comments for the item with the specified ID
     * 
     * @param attachmentId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param rootCommentsOnly  (optional, default to false)
     * @param include Links to include as full objects in the linked map (optional)
     * @return CommentDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentDataListWrapper getItemComments(Integer attachmentId, Integer startAt, Integer maxResults, Boolean rootCommentsOnly, List<String> include) throws ApiException {
        ApiResponse<CommentDataListWrapper> resp = getItemCommentsWithHttpInfo(attachmentId, startAt, maxResults, rootCommentsOnly, include);
        return resp.getData();
    }

    /**
     * Get all comments for the item with the specified ID
     * 
     * @param attachmentId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param rootCommentsOnly  (optional, default to false)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;CommentDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentDataListWrapper> getItemCommentsWithHttpInfo(Integer attachmentId, Integer startAt, Integer maxResults, Boolean rootCommentsOnly, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getItemCommentsValidateBeforeCall(attachmentId, startAt, maxResults, rootCommentsOnly, include, null, null);
        Type localVarReturnType = new TypeToken<CommentDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all comments for the item with the specified ID (asynchronously)
     * 
     * @param attachmentId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param rootCommentsOnly  (optional, default to false)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemCommentsAsync(Integer attachmentId, Integer startAt, Integer maxResults, Boolean rootCommentsOnly, List<String> include, final ApiCallback<CommentDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemCommentsValidateBeforeCall(attachmentId, startAt, maxResults, rootCommentsOnly, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLock
     * @param attachmentId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLockCall(Integer attachmentId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/attachments/{attachmentId}/lock"
            .replaceAll("\\{" + "attachmentId" + "\\}", apiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLockValidateBeforeCall(Integer attachmentId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling getLock(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getLockCall(attachmentId, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the locked state, last locked date, and last locked by user for the item with the specified ID
     * 
     * @param attachmentId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return LockDataWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LockDataWrapper getLock(Integer attachmentId, List<String> include) throws ApiException {
        ApiResponse<LockDataWrapper> resp = getLockWithHttpInfo(attachmentId, include);
        return resp.getData();
    }

    /**
     * Get the locked state, last locked date, and last locked by user for the item with the specified ID
     * 
     * @param attachmentId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;LockDataWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LockDataWrapper> getLockWithHttpInfo(Integer attachmentId, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getLockValidateBeforeCall(attachmentId, include, null, null);
        Type localVarReturnType = new TypeToken<LockDataWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the locked state, last locked date, and last locked by user for the item with the specified ID (asynchronously)
     * 
     * @param attachmentId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLockAsync(Integer attachmentId, List<String> include, final ApiCallback<LockDataWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLockValidateBeforeCall(attachmentId, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LockDataWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVersionOnItem1
     * @param versionNum  (required)
     * @param attachmentId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVersionOnItem1Call(Integer versionNum, Integer attachmentId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/attachments/{attachmentId}/versions/{versionNum}"
            .replaceAll("\\{" + "versionNum" + "\\}", apiClient.escapeString(versionNum.toString()))
            .replaceAll("\\{" + "attachmentId" + "\\}", apiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVersionOnItem1ValidateBeforeCall(Integer versionNum, Integer attachmentId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'versionNum' is set
        if (versionNum == null) {
            throw new ApiException("Missing the required parameter 'versionNum' when calling getVersionOnItem1(Async)");
        }
        
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling getVersionOnItem1(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getVersionOnItem1Call(versionNum, attachmentId, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the numbered version for the item with the specified ID
     * 
     * @param versionNum  (required)
     * @param attachmentId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return VersionDataWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionDataWrapper getVersionOnItem1(Integer versionNum, Integer attachmentId, List<String> include) throws ApiException {
        ApiResponse<VersionDataWrapper> resp = getVersionOnItem1WithHttpInfo(versionNum, attachmentId, include);
        return resp.getData();
    }

    /**
     * Get the numbered version for the item with the specified ID
     * 
     * @param versionNum  (required)
     * @param attachmentId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;VersionDataWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionDataWrapper> getVersionOnItem1WithHttpInfo(Integer versionNum, Integer attachmentId, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getVersionOnItem1ValidateBeforeCall(versionNum, attachmentId, include, null, null);
        Type localVarReturnType = new TypeToken<VersionDataWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the numbered version for the item with the specified ID (asynchronously)
     * 
     * @param versionNum  (required)
     * @param attachmentId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionOnItem1Async(Integer versionNum, Integer attachmentId, List<String> include, final ApiCallback<VersionDataWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionOnItem1ValidateBeforeCall(versionNum, attachmentId, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionDataWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVersionedItem1
     * @param versionNum  (required)
     * @param attachmentId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVersionedItem1Call(Integer versionNum, Integer attachmentId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/attachments/{attachmentId}/versions/{versionNum}/versioneditem"
            .replaceAll("\\{" + "versionNum" + "\\}", apiClient.escapeString(versionNum.toString()))
            .replaceAll("\\{" + "attachmentId" + "\\}", apiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVersionedItem1ValidateBeforeCall(Integer versionNum, Integer attachmentId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'versionNum' is set
        if (versionNum == null) {
            throw new ApiException("Missing the required parameter 'versionNum' when calling getVersionedItem1(Async)");
        }
        
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling getVersionedItem1(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getVersionedItem1Call(versionNum, attachmentId, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the  snapshot of the attachment at the specified version
     * 
     * @param versionNum  (required)
     * @param attachmentId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return VersionedAttachmentDataWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionedAttachmentDataWrapper getVersionedItem1(Integer versionNum, Integer attachmentId, List<String> include) throws ApiException {
        ApiResponse<VersionedAttachmentDataWrapper> resp = getVersionedItem1WithHttpInfo(versionNum, attachmentId, include);
        return resp.getData();
    }

    /**
     * Get the  snapshot of the attachment at the specified version
     * 
     * @param versionNum  (required)
     * @param attachmentId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;VersionedAttachmentDataWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionedAttachmentDataWrapper> getVersionedItem1WithHttpInfo(Integer versionNum, Integer attachmentId, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getVersionedItem1ValidateBeforeCall(versionNum, attachmentId, include, null, null);
        Type localVarReturnType = new TypeToken<VersionedAttachmentDataWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the  snapshot of the attachment at the specified version (asynchronously)
     * 
     * @param versionNum  (required)
     * @param attachmentId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionedItem1Async(Integer versionNum, Integer attachmentId, List<String> include, final ApiCallback<VersionedAttachmentDataWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionedItem1ValidateBeforeCall(versionNum, attachmentId, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionedAttachmentDataWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVersionsOnItem1
     * @param attachmentId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVersionsOnItem1Call(Integer attachmentId, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/attachments/{attachmentId}/versions"
            .replaceAll("\\{" + "attachmentId" + "\\}", apiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVersionsOnItem1ValidateBeforeCall(Integer attachmentId, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling getVersionsOnItem1(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getVersionsOnItem1Call(attachmentId, startAt, maxResults, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all versions for the item with the specified ID
     * 
     * @param attachmentId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return VersionDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionDataListWrapper getVersionsOnItem1(Integer attachmentId, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        ApiResponse<VersionDataListWrapper> resp = getVersionsOnItem1WithHttpInfo(attachmentId, startAt, maxResults, include);
        return resp.getData();
    }

    /**
     * Get all versions for the item with the specified ID
     * 
     * @param attachmentId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;VersionDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionDataListWrapper> getVersionsOnItem1WithHttpInfo(Integer attachmentId, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getVersionsOnItem1ValidateBeforeCall(attachmentId, startAt, maxResults, include, null, null);
        Type localVarReturnType = new TypeToken<VersionDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all versions for the item with the specified ID (asynchronously)
     * 
     * @param attachmentId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionsOnItem1Async(Integer attachmentId, Integer startAt, Integer maxResults, List<String> include, final ApiCallback<VersionDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionsOnItem1ValidateBeforeCall(attachmentId, startAt, maxResults, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLock
     * @param body  (required)
     * @param attachmentId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLockCall(RequestLock body, Integer attachmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/attachments/{attachmentId}/lock"
            .replaceAll("\\{" + "attachmentId" + "\\}", apiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLockValidateBeforeCall(RequestLock body, Integer attachmentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLock(Async)");
        }
        
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling updateLock(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateLockCall(body, attachmentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the locked state of the item with the specified ID
     * 
     * @param body  (required)
     * @param attachmentId  (required)
     * @return AbstractRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractRestResponse updateLock(RequestLock body, Integer attachmentId) throws ApiException {
        ApiResponse<AbstractRestResponse> resp = updateLockWithHttpInfo(body, attachmentId);
        return resp.getData();
    }

    /**
     * Update the locked state of the item with the specified ID
     * 
     * @param body  (required)
     * @param attachmentId  (required)
     * @return ApiResponse&lt;AbstractRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractRestResponse> updateLockWithHttpInfo(RequestLock body, Integer attachmentId) throws ApiException {
        com.squareup.okhttp.Call call = updateLockValidateBeforeCall(body, attachmentId, null, null);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the locked state of the item with the specified ID (asynchronously)
     * 
     * @param body  (required)
     * @param attachmentId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLockAsync(RequestLock body, Integer attachmentId, final ApiCallback<AbstractRestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLockValidateBeforeCall(body, attachmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadFile
     * @param attachmentId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadFileCall(Integer attachmentId, FormDataMultiPart body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/attachments/{attachmentId}/file"
            .replaceAll("\\{" + "attachmentId" + "\\}", apiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadFileValidateBeforeCall(Integer attachmentId, FormDataMultiPart body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling uploadFile(Async)");
        }
        
        
        com.squareup.okhttp.Call call = uploadFileCall(attachmentId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload attachment file to the attachment with the specified ID
     * 
     * @param attachmentId  (required)
     * @param body  (optional)
     * @return AbstractRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractRestResponse uploadFile(Integer attachmentId, FormDataMultiPart body) throws ApiException {
        ApiResponse<AbstractRestResponse> resp = uploadFileWithHttpInfo(attachmentId, body);
        return resp.getData();
    }

    /**
     * Upload attachment file to the attachment with the specified ID
     * 
     * @param attachmentId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;AbstractRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractRestResponse> uploadFileWithHttpInfo(Integer attachmentId, FormDataMultiPart body) throws ApiException {
        com.squareup.okhttp.Call call = uploadFileValidateBeforeCall(attachmentId, body, null, null);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload attachment file to the attachment with the specified ID (asynchronously)
     * 
     * @param attachmentId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadFileAsync(Integer attachmentId, FormDataMultiPart body, final ApiCallback<AbstractRestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadFileValidateBeforeCall(attachmentId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
