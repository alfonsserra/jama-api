/*
 * Jama REST API
 * This is the documentation for the Jama REST API.
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AbstractRestResponse;
import io.swagger.client.model.RequestPatchOperation;
import io.swagger.client.model.RequestTestCycle;
import io.swagger.client.model.TestCycleDataWrapper;
import io.swagger.client.model.TestCycleTestGroupDataWrapper;
import io.swagger.client.model.TestRunDataListWrapper;
import io.swagger.client.model.VersionDataListWrapper;
import io.swagger.client.model.VersionDataWrapper;
import io.swagger.client.model.VersionedTestCycleDataWrapper;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestcyclesApi {
    private ApiClient apiClient;

    public TestcyclesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TestcyclesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteTestCycle
     * @param testCycleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTestCycleCall(Integer testCycleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testcycles/{testCycleId}"
            .replaceAll("\\{" + "testCycleId" + "\\}", apiClient.escapeString(testCycleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTestCycleValidateBeforeCall(Integer testCycleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'testCycleId' is set
        if (testCycleId == null) {
            throw new ApiException("Missing the required parameter 'testCycleId' when calling deleteTestCycle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteTestCycleCall(testCycleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete the test cycle with the specified ID, including the test runs in the test cycle
     * 
     * @param testCycleId  (required)
     * @return AbstractRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractRestResponse deleteTestCycle(Integer testCycleId) throws ApiException {
        ApiResponse<AbstractRestResponse> resp = deleteTestCycleWithHttpInfo(testCycleId);
        return resp.getData();
    }

    /**
     * Delete the test cycle with the specified ID, including the test runs in the test cycle
     * 
     * @param testCycleId  (required)
     * @return ApiResponse&lt;AbstractRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractRestResponse> deleteTestCycleWithHttpInfo(Integer testCycleId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTestCycleValidateBeforeCall(testCycleId, null, null);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete the test cycle with the specified ID, including the test runs in the test cycle (asynchronously)
     * 
     * @param testCycleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTestCycleAsync(Integer testCycleId, final ApiCallback<AbstractRestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTestCycleValidateBeforeCall(testCycleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestCycle
     * @param testCycleId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestCycleCall(Integer testCycleId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testcycles/{testCycleId}"
            .replaceAll("\\{" + "testCycleId" + "\\}", apiClient.escapeString(testCycleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestCycleValidateBeforeCall(Integer testCycleId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'testCycleId' is set
        if (testCycleId == null) {
            throw new ApiException("Missing the required parameter 'testCycleId' when calling getTestCycle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestCycleCall(testCycleId, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the test cycle with the specified ID
     * 
     * @param testCycleId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return TestCycleDataWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestCycleDataWrapper getTestCycle(Integer testCycleId, List<String> include) throws ApiException {
        ApiResponse<TestCycleDataWrapper> resp = getTestCycleWithHttpInfo(testCycleId, include);
        return resp.getData();
    }

    /**
     * Get the test cycle with the specified ID
     * 
     * @param testCycleId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;TestCycleDataWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestCycleDataWrapper> getTestCycleWithHttpInfo(Integer testCycleId, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getTestCycleValidateBeforeCall(testCycleId, include, null, null);
        Type localVarReturnType = new TypeToken<TestCycleDataWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the test cycle with the specified ID (asynchronously)
     * 
     * @param testCycleId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestCycleAsync(Integer testCycleId, List<String> include, final ApiCallback<TestCycleDataWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestCycleValidateBeforeCall(testCycleId, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestCycleDataWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestCycleTestGroup
     * @param testGroupId Get the test group with the specified ID (required)
     * @param testCycleId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestCycleTestGroupCall(Integer testGroupId, Integer testCycleId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testcycles/{testCycleId}/testgroup/{testGroupId}"
            .replaceAll("\\{" + "testGroupId" + "\\}", apiClient.escapeString(testGroupId.toString()))
            .replaceAll("\\{" + "testCycleId" + "\\}", apiClient.escapeString(testCycleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestCycleTestGroupValidateBeforeCall(Integer testGroupId, Integer testCycleId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'testGroupId' is set
        if (testGroupId == null) {
            throw new ApiException("Missing the required parameter 'testGroupId' when calling getTestCycleTestGroup(Async)");
        }
        
        // verify the required parameter 'testCycleId' is set
        if (testCycleId == null) {
            throw new ApiException("Missing the required parameter 'testCycleId' when calling getTestCycleTestGroup(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestCycleTestGroupCall(testGroupId, testCycleId, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the test cycle test group for the test cycle with the specified ID
     * 
     * @param testGroupId Get the test group with the specified ID (required)
     * @param testCycleId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return TestCycleTestGroupDataWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestCycleTestGroupDataWrapper getTestCycleTestGroup(Integer testGroupId, Integer testCycleId, List<String> include) throws ApiException {
        ApiResponse<TestCycleTestGroupDataWrapper> resp = getTestCycleTestGroupWithHttpInfo(testGroupId, testCycleId, include);
        return resp.getData();
    }

    /**
     * Get the test cycle test group for the test cycle with the specified ID
     * 
     * @param testGroupId Get the test group with the specified ID (required)
     * @param testCycleId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;TestCycleTestGroupDataWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestCycleTestGroupDataWrapper> getTestCycleTestGroupWithHttpInfo(Integer testGroupId, Integer testCycleId, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getTestCycleTestGroupValidateBeforeCall(testGroupId, testCycleId, include, null, null);
        Type localVarReturnType = new TypeToken<TestCycleTestGroupDataWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the test cycle test group for the test cycle with the specified ID (asynchronously)
     * 
     * @param testGroupId Get the test group with the specified ID (required)
     * @param testCycleId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestCycleTestGroupAsync(Integer testGroupId, Integer testCycleId, List<String> include, final ApiCallback<TestCycleTestGroupDataWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestCycleTestGroupValidateBeforeCall(testGroupId, testCycleId, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestCycleTestGroupDataWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestRuns
     * @param testCycleId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestRunsCall(Integer testCycleId, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testcycles/{testCycleId}/testruns"
            .replaceAll("\\{" + "testCycleId" + "\\}", apiClient.escapeString(testCycleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestRunsValidateBeforeCall(Integer testCycleId, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'testCycleId' is set
        if (testCycleId == null) {
            throw new ApiException("Missing the required parameter 'testCycleId' when calling getTestRuns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestRunsCall(testCycleId, startAt, maxResults, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all test runs for the test cycle with the specified ID
     * 
     * @param testCycleId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return TestRunDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestRunDataListWrapper getTestRuns(Integer testCycleId, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        ApiResponse<TestRunDataListWrapper> resp = getTestRunsWithHttpInfo(testCycleId, startAt, maxResults, include);
        return resp.getData();
    }

    /**
     * Get all test runs for the test cycle with the specified ID
     * 
     * @param testCycleId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;TestRunDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestRunDataListWrapper> getTestRunsWithHttpInfo(Integer testCycleId, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getTestRunsValidateBeforeCall(testCycleId, startAt, maxResults, include, null, null);
        Type localVarReturnType = new TypeToken<TestRunDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all test runs for the test cycle with the specified ID (asynchronously)
     * 
     * @param testCycleId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestRunsAsync(Integer testCycleId, Integer startAt, Integer maxResults, List<String> include, final ApiCallback<TestRunDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestRunsValidateBeforeCall(testCycleId, startAt, maxResults, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestRunDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVersionOnItem3
     * @param versionNum  (required)
     * @param testCycleId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVersionOnItem3Call(Integer versionNum, Integer testCycleId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testcycles/{testCycleId}/versions/{versionNum}"
            .replaceAll("\\{" + "versionNum" + "\\}", apiClient.escapeString(versionNum.toString()))
            .replaceAll("\\{" + "testCycleId" + "\\}", apiClient.escapeString(testCycleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVersionOnItem3ValidateBeforeCall(Integer versionNum, Integer testCycleId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'versionNum' is set
        if (versionNum == null) {
            throw new ApiException("Missing the required parameter 'versionNum' when calling getVersionOnItem3(Async)");
        }
        
        // verify the required parameter 'testCycleId' is set
        if (testCycleId == null) {
            throw new ApiException("Missing the required parameter 'testCycleId' when calling getVersionOnItem3(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getVersionOnItem3Call(versionNum, testCycleId, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the numbered version for the item with the specified ID
     * 
     * @param versionNum  (required)
     * @param testCycleId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return VersionDataWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionDataWrapper getVersionOnItem3(Integer versionNum, Integer testCycleId, List<String> include) throws ApiException {
        ApiResponse<VersionDataWrapper> resp = getVersionOnItem3WithHttpInfo(versionNum, testCycleId, include);
        return resp.getData();
    }

    /**
     * Get the numbered version for the item with the specified ID
     * 
     * @param versionNum  (required)
     * @param testCycleId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;VersionDataWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionDataWrapper> getVersionOnItem3WithHttpInfo(Integer versionNum, Integer testCycleId, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getVersionOnItem3ValidateBeforeCall(versionNum, testCycleId, include, null, null);
        Type localVarReturnType = new TypeToken<VersionDataWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the numbered version for the item with the specified ID (asynchronously)
     * 
     * @param versionNum  (required)
     * @param testCycleId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionOnItem3Async(Integer versionNum, Integer testCycleId, List<String> include, final ApiCallback<VersionDataWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionOnItem3ValidateBeforeCall(versionNum, testCycleId, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionDataWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVersionedItem3
     * @param versionNum  (required)
     * @param testCycleId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVersionedItem3Call(Integer versionNum, Integer testCycleId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testcycles/{testCycleId}/versions/{versionNum}/versioneditem"
            .replaceAll("\\{" + "versionNum" + "\\}", apiClient.escapeString(versionNum.toString()))
            .replaceAll("\\{" + "testCycleId" + "\\}", apiClient.escapeString(testCycleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVersionedItem3ValidateBeforeCall(Integer versionNum, Integer testCycleId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'versionNum' is set
        if (versionNum == null) {
            throw new ApiException("Missing the required parameter 'versionNum' when calling getVersionedItem3(Async)");
        }
        
        // verify the required parameter 'testCycleId' is set
        if (testCycleId == null) {
            throw new ApiException("Missing the required parameter 'testCycleId' when calling getVersionedItem3(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getVersionedItem3Call(versionNum, testCycleId, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the  snapshot of the test cycle at the specified version
     * 
     * @param versionNum  (required)
     * @param testCycleId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return VersionedTestCycleDataWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionedTestCycleDataWrapper getVersionedItem3(Integer versionNum, Integer testCycleId, List<String> include) throws ApiException {
        ApiResponse<VersionedTestCycleDataWrapper> resp = getVersionedItem3WithHttpInfo(versionNum, testCycleId, include);
        return resp.getData();
    }

    /**
     * Get the  snapshot of the test cycle at the specified version
     * 
     * @param versionNum  (required)
     * @param testCycleId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;VersionedTestCycleDataWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionedTestCycleDataWrapper> getVersionedItem3WithHttpInfo(Integer versionNum, Integer testCycleId, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getVersionedItem3ValidateBeforeCall(versionNum, testCycleId, include, null, null);
        Type localVarReturnType = new TypeToken<VersionedTestCycleDataWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the  snapshot of the test cycle at the specified version (asynchronously)
     * 
     * @param versionNum  (required)
     * @param testCycleId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionedItem3Async(Integer versionNum, Integer testCycleId, List<String> include, final ApiCallback<VersionedTestCycleDataWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionedItem3ValidateBeforeCall(versionNum, testCycleId, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionedTestCycleDataWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVersionsOnItem3
     * @param testCycleId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVersionsOnItem3Call(Integer testCycleId, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testcycles/{testCycleId}/versions"
            .replaceAll("\\{" + "testCycleId" + "\\}", apiClient.escapeString(testCycleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVersionsOnItem3ValidateBeforeCall(Integer testCycleId, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'testCycleId' is set
        if (testCycleId == null) {
            throw new ApiException("Missing the required parameter 'testCycleId' when calling getVersionsOnItem3(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getVersionsOnItem3Call(testCycleId, startAt, maxResults, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all versions for the item with the specified ID
     * 
     * @param testCycleId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return VersionDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionDataListWrapper getVersionsOnItem3(Integer testCycleId, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        ApiResponse<VersionDataListWrapper> resp = getVersionsOnItem3WithHttpInfo(testCycleId, startAt, maxResults, include);
        return resp.getData();
    }

    /**
     * Get all versions for the item with the specified ID
     * 
     * @param testCycleId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;VersionDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionDataListWrapper> getVersionsOnItem3WithHttpInfo(Integer testCycleId, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getVersionsOnItem3ValidateBeforeCall(testCycleId, startAt, maxResults, include, null, null);
        Type localVarReturnType = new TypeToken<VersionDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all versions for the item with the specified ID (asynchronously)
     * 
     * @param testCycleId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionsOnItem3Async(Integer testCycleId, Integer startAt, Integer maxResults, List<String> include, final ApiCallback<VersionDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionsOnItem3ValidateBeforeCall(testCycleId, startAt, maxResults, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchTestCycle
     * @param body  (required)
     * @param testCycleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchTestCycleCall(List<RequestPatchOperation> body, Integer testCycleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/testcycles/{testCycleId}"
            .replaceAll("\\{" + "testCycleId" + "\\}", apiClient.escapeString(testCycleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchTestCycleValidateBeforeCall(List<RequestPatchOperation> body, Integer testCycleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling patchTestCycle(Async)");
        }
        
        // verify the required parameter 'testCycleId' is set
        if (testCycleId == null) {
            throw new ApiException("Missing the required parameter 'testCycleId' when calling patchTestCycle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = patchTestCycleCall(body, testCycleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the test cycle with the specified ID, including regenerating the test runs in the test cycle
     * 
     * @param body  (required)
     * @param testCycleId  (required)
     * @return AbstractRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractRestResponse patchTestCycle(List<RequestPatchOperation> body, Integer testCycleId) throws ApiException {
        ApiResponse<AbstractRestResponse> resp = patchTestCycleWithHttpInfo(body, testCycleId);
        return resp.getData();
    }

    /**
     * Update the test cycle with the specified ID, including regenerating the test runs in the test cycle
     * 
     * @param body  (required)
     * @param testCycleId  (required)
     * @return ApiResponse&lt;AbstractRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractRestResponse> patchTestCycleWithHttpInfo(List<RequestPatchOperation> body, Integer testCycleId) throws ApiException {
        com.squareup.okhttp.Call call = patchTestCycleValidateBeforeCall(body, testCycleId, null, null);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the test cycle with the specified ID, including regenerating the test runs in the test cycle (asynchronously)
     * 
     * @param body  (required)
     * @param testCycleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchTestCycleAsync(List<RequestPatchOperation> body, Integer testCycleId, final ApiCallback<AbstractRestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchTestCycleValidateBeforeCall(body, testCycleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTestCycle
     * @param body  (required)
     * @param testCycleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTestCycleCall(RequestTestCycle body, Integer testCycleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/testcycles/{testCycleId}"
            .replaceAll("\\{" + "testCycleId" + "\\}", apiClient.escapeString(testCycleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTestCycleValidateBeforeCall(RequestTestCycle body, Integer testCycleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTestCycle(Async)");
        }
        
        // verify the required parameter 'testCycleId' is set
        if (testCycleId == null) {
            throw new ApiException("Missing the required parameter 'testCycleId' when calling updateTestCycle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateTestCycleCall(body, testCycleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the test cycle with the specified ID, including regenerating the test runs in the test cycle
     * 
     * @param body  (required)
     * @param testCycleId  (required)
     * @return AbstractRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractRestResponse updateTestCycle(RequestTestCycle body, Integer testCycleId) throws ApiException {
        ApiResponse<AbstractRestResponse> resp = updateTestCycleWithHttpInfo(body, testCycleId);
        return resp.getData();
    }

    /**
     * Update the test cycle with the specified ID, including regenerating the test runs in the test cycle
     * 
     * @param body  (required)
     * @param testCycleId  (required)
     * @return ApiResponse&lt;AbstractRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractRestResponse> updateTestCycleWithHttpInfo(RequestTestCycle body, Integer testCycleId) throws ApiException {
        com.squareup.okhttp.Call call = updateTestCycleValidateBeforeCall(body, testCycleId, null, null);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the test cycle with the specified ID, including regenerating the test runs in the test cycle (asynchronously)
     * 
     * @param body  (required)
     * @param testCycleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTestCycleAsync(RequestTestCycle body, Integer testCycleId, final ApiCallback<AbstractRestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTestCycleValidateBeforeCall(body, testCycleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
