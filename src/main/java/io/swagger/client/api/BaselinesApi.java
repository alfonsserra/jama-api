/*
 * Jama REST API
 * This is the documentation for the Jama REST API.
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BaselineDataListWrapper;
import io.swagger.client.model.BaselineDataWrapper;
import io.swagger.client.model.BaselineItemDataListWrapper;
import io.swagger.client.model.BaselineItemDataWrapper;
import io.swagger.client.model.VersionedRelationshipDataListWrapper;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BaselinesApi {
    private ApiClient apiClient;

    public BaselinesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BaselinesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getBaseline
     * @param baselineId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBaselineCall(Integer baselineId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/baselines/{baselineId}"
            .replaceAll("\\{" + "baselineId" + "\\}", apiClient.escapeString(baselineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBaselineValidateBeforeCall(Integer baselineId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'baselineId' is set
        if (baselineId == null) {
            throw new ApiException("Missing the required parameter 'baselineId' when calling getBaseline(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getBaselineCall(baselineId, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the baseline with the specified ID
     * 
     * @param baselineId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return BaselineDataWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaselineDataWrapper getBaseline(Integer baselineId, List<String> include) throws ApiException {
        ApiResponse<BaselineDataWrapper> resp = getBaselineWithHttpInfo(baselineId, include);
        return resp.getData();
    }

    /**
     * Get the baseline with the specified ID
     * 
     * @param baselineId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;BaselineDataWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaselineDataWrapper> getBaselineWithHttpInfo(Integer baselineId, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getBaselineValidateBeforeCall(baselineId, include, null, null);
        Type localVarReturnType = new TypeToken<BaselineDataWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the baseline with the specified ID (asynchronously)
     * 
     * @param baselineId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBaselineAsync(Integer baselineId, List<String> include, final ApiCallback<BaselineDataWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBaselineValidateBeforeCall(baselineId, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaselineDataWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBaselines
     * @param project  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBaselinesCall(Integer project, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/baselines";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (project != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("project", project));
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBaselinesValidateBeforeCall(Integer project, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling getBaselines(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getBaselinesCall(project, startAt, maxResults, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all baselines in the project with the specified ID
     * 
     * @param project  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return BaselineDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaselineDataListWrapper getBaselines(Integer project, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        ApiResponse<BaselineDataListWrapper> resp = getBaselinesWithHttpInfo(project, startAt, maxResults, include);
        return resp.getData();
    }

    /**
     * Get all baselines in the project with the specified ID
     * 
     * @param project  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;BaselineDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaselineDataListWrapper> getBaselinesWithHttpInfo(Integer project, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getBaselinesValidateBeforeCall(project, startAt, maxResults, include, null, null);
        Type localVarReturnType = new TypeToken<BaselineDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all baselines in the project with the specified ID (asynchronously)
     * 
     * @param project  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBaselinesAsync(Integer project, Integer startAt, Integer maxResults, List<String> include, final ApiCallback<BaselineDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBaselinesValidateBeforeCall(project, startAt, maxResults, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaselineDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRelationshipsForVersion
     * @param itemId  (required)
     * @param baselineId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRelationshipsForVersionCall(Integer itemId, Integer baselineId, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/baselines/{baselineId}/versioneditems/{itemId}/versionedrelationships"
            .replaceAll("\\{" + "itemId" + "\\}", apiClient.escapeString(itemId.toString()))
            .replaceAll("\\{" + "baselineId" + "\\}", apiClient.escapeString(baselineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRelationshipsForVersionValidateBeforeCall(Integer itemId, Integer baselineId, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getRelationshipsForVersion(Async)");
        }
        
        // verify the required parameter 'baselineId' is set
        if (baselineId == null) {
            throw new ApiException("Missing the required parameter 'baselineId' when calling getRelationshipsForVersion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getRelationshipsForVersionCall(itemId, baselineId, startAt, maxResults, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all versioned relationships for the item in the baseline
     * 
     * @param itemId  (required)
     * @param baselineId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return VersionedRelationshipDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionedRelationshipDataListWrapper getRelationshipsForVersion(Integer itemId, Integer baselineId, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        ApiResponse<VersionedRelationshipDataListWrapper> resp = getRelationshipsForVersionWithHttpInfo(itemId, baselineId, startAt, maxResults, include);
        return resp.getData();
    }

    /**
     * Get all versioned relationships for the item in the baseline
     * 
     * @param itemId  (required)
     * @param baselineId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;VersionedRelationshipDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionedRelationshipDataListWrapper> getRelationshipsForVersionWithHttpInfo(Integer itemId, Integer baselineId, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getRelationshipsForVersionValidateBeforeCall(itemId, baselineId, startAt, maxResults, include, null, null);
        Type localVarReturnType = new TypeToken<VersionedRelationshipDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all versioned relationships for the item in the baseline (asynchronously)
     * 
     * @param itemId  (required)
     * @param baselineId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRelationshipsForVersionAsync(Integer itemId, Integer baselineId, Integer startAt, Integer maxResults, List<String> include, final ApiCallback<VersionedRelationshipDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRelationshipsForVersionValidateBeforeCall(itemId, baselineId, startAt, maxResults, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionedRelationshipDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVersionedItem
     * @param itemId  (required)
     * @param baselineId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVersionedItemCall(Integer itemId, Integer baselineId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/baselines/{baselineId}/versioneditems/{itemId}"
            .replaceAll("\\{" + "itemId" + "\\}", apiClient.escapeString(itemId.toString()))
            .replaceAll("\\{" + "baselineId" + "\\}", apiClient.escapeString(baselineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVersionedItemValidateBeforeCall(Integer itemId, Integer baselineId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getVersionedItem(Async)");
        }
        
        // verify the required parameter 'baselineId' is set
        if (baselineId == null) {
            throw new ApiException("Missing the required parameter 'baselineId' when calling getVersionedItem(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getVersionedItemCall(itemId, baselineId, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the baseline item with the specified ID in a baseline with the specified ID
     * 
     * @param itemId  (required)
     * @param baselineId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return BaselineItemDataWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaselineItemDataWrapper getVersionedItem(Integer itemId, Integer baselineId, List<String> include) throws ApiException {
        ApiResponse<BaselineItemDataWrapper> resp = getVersionedItemWithHttpInfo(itemId, baselineId, include);
        return resp.getData();
    }

    /**
     * Get the baseline item with the specified ID in a baseline with the specified ID
     * 
     * @param itemId  (required)
     * @param baselineId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;BaselineItemDataWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaselineItemDataWrapper> getVersionedItemWithHttpInfo(Integer itemId, Integer baselineId, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getVersionedItemValidateBeforeCall(itemId, baselineId, include, null, null);
        Type localVarReturnType = new TypeToken<BaselineItemDataWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the baseline item with the specified ID in a baseline with the specified ID (asynchronously)
     * 
     * @param itemId  (required)
     * @param baselineId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionedItemAsync(Integer itemId, Integer baselineId, List<String> include, final ApiCallback<BaselineItemDataWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionedItemValidateBeforeCall(itemId, baselineId, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaselineItemDataWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVersionedItems
     * @param baselineId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVersionedItemsCall(Integer baselineId, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/baselines/{baselineId}/versioneditems"
            .replaceAll("\\{" + "baselineId" + "\\}", apiClient.escapeString(baselineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVersionedItemsValidateBeforeCall(Integer baselineId, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'baselineId' is set
        if (baselineId == null) {
            throw new ApiException("Missing the required parameter 'baselineId' when calling getVersionedItems(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getVersionedItemsCall(baselineId, startAt, maxResults, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all baseline items in a baseline with the specified ID
     * 
     * @param baselineId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return BaselineItemDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaselineItemDataListWrapper getVersionedItems(Integer baselineId, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        ApiResponse<BaselineItemDataListWrapper> resp = getVersionedItemsWithHttpInfo(baselineId, startAt, maxResults, include);
        return resp.getData();
    }

    /**
     * Get all baseline items in a baseline with the specified ID
     * 
     * @param baselineId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;BaselineItemDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaselineItemDataListWrapper> getVersionedItemsWithHttpInfo(Integer baselineId, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getVersionedItemsValidateBeforeCall(baselineId, startAt, maxResults, include, null, null);
        Type localVarReturnType = new TypeToken<BaselineItemDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all baseline items in a baseline with the specified ID (asynchronously)
     * 
     * @param baselineId  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionedItemsAsync(Integer baselineId, Integer startAt, Integer maxResults, List<String> include, final ApiCallback<BaselineItemDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionedItemsValidateBeforeCall(baselineId, startAt, maxResults, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaselineItemDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
