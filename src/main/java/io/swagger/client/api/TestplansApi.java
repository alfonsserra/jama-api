/*
 * Jama REST API
 * This is the documentation for the Jama REST API.
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AbstractItemDataListWrapper;
import io.swagger.client.model.AbstractRestResponse;
import io.swagger.client.model.ActivityDataListWrapper;
import io.swagger.client.model.AttachmentDataListWrapper;
import io.swagger.client.model.CommentDataListWrapper;
import io.swagger.client.model.CreatedResponse;
import io.swagger.client.model.ItemDataListWrapper;
import io.swagger.client.model.ItemDataWrapper;
import io.swagger.client.model.LinkDataListWrapper;
import io.swagger.client.model.LinkDataWrapper;
import io.swagger.client.model.LockDataWrapper;
import io.swagger.client.model.RelationshipDataListWrapper;
import io.swagger.client.model.RequestArchivedStatus;
import io.swagger.client.model.RequestItemAttachment;
import io.swagger.client.model.RequestItemTag;
import io.swagger.client.model.RequestLink;
import io.swagger.client.model.RequestLock;
import io.swagger.client.model.RequestPatchOperation;
import io.swagger.client.model.RequestTestCycle;
import io.swagger.client.model.RequestTestGroup;
import io.swagger.client.model.RequestTestGroupTestCase;
import io.swagger.client.model.RequestTestPlan;
import io.swagger.client.model.TagDataListWrapper;
import io.swagger.client.model.TagDataWrapper;
import io.swagger.client.model.TestCycleDataListWrapper;
import io.swagger.client.model.TestGroupDataListWrapper;
import io.swagger.client.model.TestGroupDataWrapper;
import io.swagger.client.model.TestPlanDataListWrapper;
import io.swagger.client.model.TestPlanDataWrapper;
import io.swagger.client.model.VersionDataListWrapper;
import io.swagger.client.model.VersionDataWrapper;
import io.swagger.client.model.VersionedTestPlanDataWrapper;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestplansApi {
    private ApiClient apiClient;

    public TestplansApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TestplansApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addAttachmentToItem
     * @param body  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addAttachmentToItemCall(RequestItemAttachment body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/attachments"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addAttachmentToItemValidateBeforeCall(RequestItemAttachment body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addAttachmentToItem(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addAttachmentToItem(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addAttachmentToItemCall(body, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add an existing attachment to the item with the specified ID
     * 
     * @param body  (required)
     * @param id  (required)
     * @return CreatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreatedResponse addAttachmentToItem(RequestItemAttachment body, Integer id) throws ApiException {
        ApiResponse<CreatedResponse> resp = addAttachmentToItemWithHttpInfo(body, id);
        return resp.getData();
    }

    /**
     * Add an existing attachment to the item with the specified ID
     * 
     * @param body  (required)
     * @param id  (required)
     * @return ApiResponse&lt;CreatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreatedResponse> addAttachmentToItemWithHttpInfo(RequestItemAttachment body, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = addAttachmentToItemValidateBeforeCall(body, id, null, null);
        Type localVarReturnType = new TypeToken<CreatedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add an existing attachment to the item with the specified ID (asynchronously)
     * 
     * @param body  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addAttachmentToItemAsync(RequestItemAttachment body, Integer id, final ApiCallback<CreatedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addAttachmentToItemValidateBeforeCall(body, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addItemLink
     * @param body  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addItemLinkCall(RequestLink body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/links"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemLinkValidateBeforeCall(RequestLink body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addItemLink(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addItemLink(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addItemLinkCall(body, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new link for the item with the specified ID
     * 
     * @param body  (required)
     * @param id  (required)
     * @return CreatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreatedResponse addItemLink(RequestLink body, Integer id) throws ApiException {
        ApiResponse<CreatedResponse> resp = addItemLinkWithHttpInfo(body, id);
        return resp.getData();
    }

    /**
     * Create a new link for the item with the specified ID
     * 
     * @param body  (required)
     * @param id  (required)
     * @return ApiResponse&lt;CreatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreatedResponse> addItemLinkWithHttpInfo(RequestLink body, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = addItemLinkValidateBeforeCall(body, id, null, null);
        Type localVarReturnType = new TypeToken<CreatedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new link for the item with the specified ID (asynchronously)
     * 
     * @param body  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemLinkAsync(RequestLink body, Integer id, final ApiCallback<CreatedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemLinkValidateBeforeCall(body, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addTagToItem
     * @param body  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addTagToItemCall(RequestItemTag body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/tags"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTagToItemValidateBeforeCall(RequestItemTag body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addTagToItem(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addTagToItem(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addTagToItemCall(body, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add an existing tag to the item with the specified ID
     * 
     * @param body  (required)
     * @param id  (required)
     * @return CreatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreatedResponse addTagToItem(RequestItemTag body, Integer id) throws ApiException {
        ApiResponse<CreatedResponse> resp = addTagToItemWithHttpInfo(body, id);
        return resp.getData();
    }

    /**
     * Add an existing tag to the item with the specified ID
     * 
     * @param body  (required)
     * @param id  (required)
     * @return ApiResponse&lt;CreatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreatedResponse> addTagToItemWithHttpInfo(RequestItemTag body, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = addTagToItemValidateBeforeCall(body, id, null, null);
        Type localVarReturnType = new TypeToken<CreatedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add an existing tag to the item with the specified ID (asynchronously)
     * 
     * @param body  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTagToItemAsync(RequestItemTag body, Integer id, final ApiCallback<CreatedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTagToItemValidateBeforeCall(body, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addTestGroup
     * @param body  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addTestGroupCall(RequestTestGroup body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/testgroups"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTestGroupValidateBeforeCall(RequestTestGroup body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addTestGroup(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addTestGroup(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addTestGroupCall(body, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new test group to the test plan with the specified ID
     * 
     * @param body  (required)
     * @param id  (required)
     * @return CreatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreatedResponse addTestGroup(RequestTestGroup body, Integer id) throws ApiException {
        ApiResponse<CreatedResponse> resp = addTestGroupWithHttpInfo(body, id);
        return resp.getData();
    }

    /**
     * Create a new test group to the test plan with the specified ID
     * 
     * @param body  (required)
     * @param id  (required)
     * @return ApiResponse&lt;CreatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreatedResponse> addTestGroupWithHttpInfo(RequestTestGroup body, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = addTestGroupValidateBeforeCall(body, id, null, null);
        Type localVarReturnType = new TypeToken<CreatedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new test group to the test plan with the specified ID (asynchronously)
     * 
     * @param body  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTestGroupAsync(RequestTestGroup body, Integer id, final ApiCallback<CreatedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTestGroupValidateBeforeCall(body, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTestCycle
     * @param body  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTestCycleCall(RequestTestCycle body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/testcycles"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTestCycleValidateBeforeCall(RequestTestCycle body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTestCycle(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createTestCycle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createTestCycleCall(body, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new test cycle
     * 
     * @param body  (required)
     * @param id  (required)
     * @return CreatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreatedResponse createTestCycle(RequestTestCycle body, Integer id) throws ApiException {
        ApiResponse<CreatedResponse> resp = createTestCycleWithHttpInfo(body, id);
        return resp.getData();
    }

    /**
     * Create a new test cycle
     * 
     * @param body  (required)
     * @param id  (required)
     * @return ApiResponse&lt;CreatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreatedResponse> createTestCycleWithHttpInfo(RequestTestCycle body, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = createTestCycleValidateBeforeCall(body, id, null, null);
        Type localVarReturnType = new TypeToken<CreatedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new test cycle (asynchronously)
     * 
     * @param body  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTestCycleAsync(RequestTestCycle body, Integer id, final ApiCallback<CreatedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTestCycleValidateBeforeCall(body, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTestPlan
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTestPlanCall(RequestTestPlan body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/testplans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTestPlanValidateBeforeCall(RequestTestPlan body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTestPlan(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createTestPlanCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new test plan
     * 
     * @param body  (required)
     * @return CreatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreatedResponse createTestPlan(RequestTestPlan body) throws ApiException {
        ApiResponse<CreatedResponse> resp = createTestPlanWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new test plan
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreatedResponse> createTestPlanWithHttpInfo(RequestTestPlan body) throws ApiException {
        com.squareup.okhttp.Call call = createTestPlanValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CreatedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new test plan (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTestPlanAsync(RequestTestPlan body, final ApiCallback<CreatedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTestPlanValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteItemLink
     * @param linkId  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteItemLinkCall(Integer linkId, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/links/{linkId}"
            .replaceAll("\\{" + "linkId" + "\\}", apiClient.escapeString(linkId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemLinkValidateBeforeCall(Integer linkId, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling deleteItemLink(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteItemLink(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteItemLinkCall(linkId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete the link with the specified ID
     * 
     * @param linkId  (required)
     * @param id  (required)
     * @return AbstractRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractRestResponse deleteItemLink(Integer linkId, Integer id) throws ApiException {
        ApiResponse<AbstractRestResponse> resp = deleteItemLinkWithHttpInfo(linkId, id);
        return resp.getData();
    }

    /**
     * Delete the link with the specified ID
     * 
     * @param linkId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;AbstractRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractRestResponse> deleteItemLinkWithHttpInfo(Integer linkId, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemLinkValidateBeforeCall(linkId, id, null, null);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete the link with the specified ID (asynchronously)
     * 
     * @param linkId  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemLinkAsync(Integer linkId, Integer id, final ApiCallback<AbstractRestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemLinkValidateBeforeCall(linkId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteTestCase
     * @param testCaseId  (required)
     * @param testGroupId  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTestCaseCall(Integer testCaseId, Integer testGroupId, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/testgroups/{testGroupId}/testcases/{testCaseId}"
            .replaceAll("\\{" + "testCaseId" + "\\}", apiClient.escapeString(testCaseId.toString()))
            .replaceAll("\\{" + "testGroupId" + "\\}", apiClient.escapeString(testGroupId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTestCaseValidateBeforeCall(Integer testCaseId, Integer testGroupId, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'testCaseId' is set
        if (testCaseId == null) {
            throw new ApiException("Missing the required parameter 'testCaseId' when calling deleteTestCase(Async)");
        }
        
        // verify the required parameter 'testGroupId' is set
        if (testGroupId == null) {
            throw new ApiException("Missing the required parameter 'testGroupId' when calling deleteTestCase(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTestCase(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteTestCaseCall(testCaseId, testGroupId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove an existing test case from the test group
     * 
     * @param testCaseId  (required)
     * @param testGroupId  (required)
     * @param id  (required)
     * @return AbstractRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractRestResponse deleteTestCase(Integer testCaseId, Integer testGroupId, Integer id) throws ApiException {
        ApiResponse<AbstractRestResponse> resp = deleteTestCaseWithHttpInfo(testCaseId, testGroupId, id);
        return resp.getData();
    }

    /**
     * Remove an existing test case from the test group
     * 
     * @param testCaseId  (required)
     * @param testGroupId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;AbstractRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractRestResponse> deleteTestCaseWithHttpInfo(Integer testCaseId, Integer testGroupId, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = deleteTestCaseValidateBeforeCall(testCaseId, testGroupId, id, null, null);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove an existing test case from the test group (asynchronously)
     * 
     * @param testCaseId  (required)
     * @param testGroupId  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTestCaseAsync(Integer testCaseId, Integer testGroupId, Integer id, final ApiCallback<AbstractRestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTestCaseValidateBeforeCall(testCaseId, testGroupId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteTestGroup
     * @param testGroupId  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTestGroupCall(Integer testGroupId, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/testgroups/{testGroupId}"
            .replaceAll("\\{" + "testGroupId" + "\\}", apiClient.escapeString(testGroupId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTestGroupValidateBeforeCall(Integer testGroupId, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'testGroupId' is set
        if (testGroupId == null) {
            throw new ApiException("Missing the required parameter 'testGroupId' when calling deleteTestGroup(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTestGroup(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteTestGroupCall(testGroupId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete the test group with the specified ID
     * 
     * @param testGroupId  (required)
     * @param id  (required)
     * @return AbstractRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractRestResponse deleteTestGroup(Integer testGroupId, Integer id) throws ApiException {
        ApiResponse<AbstractRestResponse> resp = deleteTestGroupWithHttpInfo(testGroupId, id);
        return resp.getData();
    }

    /**
     * Delete the test group with the specified ID
     * 
     * @param testGroupId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;AbstractRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractRestResponse> deleteTestGroupWithHttpInfo(Integer testGroupId, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = deleteTestGroupValidateBeforeCall(testGroupId, id, null, null);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete the test group with the specified ID (asynchronously)
     * 
     * @param testGroupId  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTestGroupAsync(Integer testGroupId, Integer id, final ApiCallback<AbstractRestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTestGroupValidateBeforeCall(testGroupId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteTestPlan
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTestPlanCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTestPlanValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTestPlan(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteTestPlanCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete the test plan with the specified ID
     * 
     * @param id  (required)
     * @return AbstractRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractRestResponse deleteTestPlan(Integer id) throws ApiException {
        ApiResponse<AbstractRestResponse> resp = deleteTestPlanWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Delete the test plan with the specified ID
     * 
     * @param id  (required)
     * @return ApiResponse&lt;AbstractRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractRestResponse> deleteTestPlanWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = deleteTestPlanValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete the test plan with the specified ID (asynchronously)
     * 
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTestPlanAsync(Integer id, final ApiCallback<AbstractRestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTestPlanValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getActivities
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getActivitiesCall(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/activities"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getActivitiesValidateBeforeCall(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getActivities(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getActivitiesCall(id, startAt, maxResults, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all activities for the test plan with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ActivityDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActivityDataListWrapper getActivities(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        ApiResponse<ActivityDataListWrapper> resp = getActivitiesWithHttpInfo(id, startAt, maxResults, include);
        return resp.getData();
    }

    /**
     * Get all activities for the test plan with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;ActivityDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActivityDataListWrapper> getActivitiesWithHttpInfo(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getActivitiesValidateBeforeCall(id, startAt, maxResults, include, null, null);
        Type localVarReturnType = new TypeToken<ActivityDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all activities for the test plan with the specified ID (asynchronously)
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getActivitiesAsync(Integer id, Integer startAt, Integer maxResults, List<String> include, final ApiCallback<ActivityDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getActivitiesValidateBeforeCall(id, startAt, maxResults, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActivityDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAttachments
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAttachmentsCall(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/attachments"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAttachmentsValidateBeforeCall(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAttachments(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAttachmentsCall(id, startAt, maxResults, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all attachments for the item with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return AttachmentDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AttachmentDataListWrapper getAttachments(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        ApiResponse<AttachmentDataListWrapper> resp = getAttachmentsWithHttpInfo(id, startAt, maxResults, include);
        return resp.getData();
    }

    /**
     * Get all attachments for the item with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;AttachmentDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AttachmentDataListWrapper> getAttachmentsWithHttpInfo(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getAttachmentsValidateBeforeCall(id, startAt, maxResults, include, null, null);
        Type localVarReturnType = new TypeToken<AttachmentDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all attachments for the item with the specified ID (asynchronously)
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAttachmentsAsync(Integer id, Integer startAt, Integer maxResults, List<String> include, final ApiCallback<AttachmentDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAttachmentsValidateBeforeCall(id, startAt, maxResults, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AttachmentDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDownstreamRelated
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDownstreamRelatedCall(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/downstreamrelated"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDownstreamRelatedValidateBeforeCall(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDownstreamRelated(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getDownstreamRelatedCall(id, startAt, maxResults, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all downstream related items for the test plan with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return AbstractItemDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractItemDataListWrapper getDownstreamRelated(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        ApiResponse<AbstractItemDataListWrapper> resp = getDownstreamRelatedWithHttpInfo(id, startAt, maxResults, include);
        return resp.getData();
    }

    /**
     * Get all downstream related items for the test plan with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;AbstractItemDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractItemDataListWrapper> getDownstreamRelatedWithHttpInfo(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getDownstreamRelatedValidateBeforeCall(id, startAt, maxResults, include, null, null);
        Type localVarReturnType = new TypeToken<AbstractItemDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all downstream related items for the test plan with the specified ID (asynchronously)
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDownstreamRelatedAsync(Integer id, Integer startAt, Integer maxResults, List<String> include, final ApiCallback<AbstractItemDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDownstreamRelatedValidateBeforeCall(id, startAt, maxResults, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractItemDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDownstreamRelationships
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDownstreamRelationshipsCall(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/downstreamrelationships"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDownstreamRelationshipsValidateBeforeCall(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDownstreamRelationships(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getDownstreamRelationshipsCall(id, startAt, maxResults, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all downstream relationships for the test plan with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return RelationshipDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RelationshipDataListWrapper getDownstreamRelationships(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        ApiResponse<RelationshipDataListWrapper> resp = getDownstreamRelationshipsWithHttpInfo(id, startAt, maxResults, include);
        return resp.getData();
    }

    /**
     * Get all downstream relationships for the test plan with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;RelationshipDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RelationshipDataListWrapper> getDownstreamRelationshipsWithHttpInfo(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getDownstreamRelationshipsValidateBeforeCall(id, startAt, maxResults, include, null, null);
        Type localVarReturnType = new TypeToken<RelationshipDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all downstream relationships for the test plan with the specified ID (asynchronously)
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDownstreamRelationshipsAsync(Integer id, Integer startAt, Integer maxResults, List<String> include, final ApiCallback<RelationshipDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDownstreamRelationshipsValidateBeforeCall(id, startAt, maxResults, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RelationshipDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemComments
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param rootCommentsOnly  (optional, default to false)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemCommentsCall(Integer id, Integer startAt, Integer maxResults, Boolean rootCommentsOnly, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/comments"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (rootCommentsOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rootCommentsOnly", rootCommentsOnly));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemCommentsValidateBeforeCall(Integer id, Integer startAt, Integer maxResults, Boolean rootCommentsOnly, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getItemComments(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getItemCommentsCall(id, startAt, maxResults, rootCommentsOnly, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all comments for the item with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param rootCommentsOnly  (optional, default to false)
     * @param include Links to include as full objects in the linked map (optional)
     * @return CommentDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentDataListWrapper getItemComments(Integer id, Integer startAt, Integer maxResults, Boolean rootCommentsOnly, List<String> include) throws ApiException {
        ApiResponse<CommentDataListWrapper> resp = getItemCommentsWithHttpInfo(id, startAt, maxResults, rootCommentsOnly, include);
        return resp.getData();
    }

    /**
     * Get all comments for the item with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param rootCommentsOnly  (optional, default to false)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;CommentDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentDataListWrapper> getItemCommentsWithHttpInfo(Integer id, Integer startAt, Integer maxResults, Boolean rootCommentsOnly, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getItemCommentsValidateBeforeCall(id, startAt, maxResults, rootCommentsOnly, include, null, null);
        Type localVarReturnType = new TypeToken<CommentDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all comments for the item with the specified ID (asynchronously)
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param rootCommentsOnly  (optional, default to false)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemCommentsAsync(Integer id, Integer startAt, Integer maxResults, Boolean rootCommentsOnly, List<String> include, final ApiCallback<CommentDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemCommentsValidateBeforeCall(id, startAt, maxResults, rootCommentsOnly, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemLinks
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemLinksCall(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/links"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemLinksValidateBeforeCall(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getItemLinks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getItemLinksCall(id, startAt, maxResults, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all links for the item with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return LinkDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinkDataListWrapper getItemLinks(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        ApiResponse<LinkDataListWrapper> resp = getItemLinksWithHttpInfo(id, startAt, maxResults, include);
        return resp.getData();
    }

    /**
     * Get all links for the item with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;LinkDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinkDataListWrapper> getItemLinksWithHttpInfo(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getItemLinksValidateBeforeCall(id, startAt, maxResults, include, null, null);
        Type localVarReturnType = new TypeToken<LinkDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all links for the item with the specified ID (asynchronously)
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemLinksAsync(Integer id, Integer startAt, Integer maxResults, List<String> include, final ApiCallback<LinkDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemLinksValidateBeforeCall(id, startAt, maxResults, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLinkById
     * @param linkId  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLinkByIdCall(Integer linkId, Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/links/{linkId}"
            .replaceAll("\\{" + "linkId" + "\\}", apiClient.escapeString(linkId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLinkByIdValidateBeforeCall(Integer linkId, Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling getLinkById(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getLinkById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getLinkByIdCall(linkId, id, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the link with the specified ID
     * 
     * @param linkId  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return LinkDataWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinkDataWrapper getLinkById(Integer linkId, Integer id, List<String> include) throws ApiException {
        ApiResponse<LinkDataWrapper> resp = getLinkByIdWithHttpInfo(linkId, id, include);
        return resp.getData();
    }

    /**
     * Get the link with the specified ID
     * 
     * @param linkId  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;LinkDataWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinkDataWrapper> getLinkByIdWithHttpInfo(Integer linkId, Integer id, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getLinkByIdValidateBeforeCall(linkId, id, include, null, null);
        Type localVarReturnType = new TypeToken<LinkDataWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the link with the specified ID (asynchronously)
     * 
     * @param linkId  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLinkByIdAsync(Integer linkId, Integer id, List<String> include, final ApiCallback<LinkDataWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLinkByIdValidateBeforeCall(linkId, id, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkDataWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLock
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLockCall(Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/lock"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLockValidateBeforeCall(Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getLock(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getLockCall(id, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the locked state, last locked date, and last locked by user for the item with the specified ID
     * 
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return LockDataWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LockDataWrapper getLock(Integer id, List<String> include) throws ApiException {
        ApiResponse<LockDataWrapper> resp = getLockWithHttpInfo(id, include);
        return resp.getData();
    }

    /**
     * Get the locked state, last locked date, and last locked by user for the item with the specified ID
     * 
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;LockDataWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LockDataWrapper> getLockWithHttpInfo(Integer id, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getLockValidateBeforeCall(id, include, null, null);
        Type localVarReturnType = new TypeToken<LockDataWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the locked state, last locked date, and last locked by user for the item with the specified ID (asynchronously)
     * 
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLockAsync(Integer id, List<String> include, final ApiCallback<LockDataWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLockValidateBeforeCall(id, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LockDataWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTagOnItem
     * @param tagId  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTagOnItemCall(Integer tagId, Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/tags/{tagId}"
            .replaceAll("\\{" + "tagId" + "\\}", apiClient.escapeString(tagId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTagOnItemValidateBeforeCall(Integer tagId, Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling getTagOnItem(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTagOnItem(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTagOnItemCall(tagId, id, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the tag with the specified ID
     * 
     * @param tagId  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return TagDataWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TagDataWrapper getTagOnItem(Integer tagId, Integer id, List<String> include) throws ApiException {
        ApiResponse<TagDataWrapper> resp = getTagOnItemWithHttpInfo(tagId, id, include);
        return resp.getData();
    }

    /**
     * Get the tag with the specified ID
     * 
     * @param tagId  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;TagDataWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TagDataWrapper> getTagOnItemWithHttpInfo(Integer tagId, Integer id, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getTagOnItemValidateBeforeCall(tagId, id, include, null, null);
        Type localVarReturnType = new TypeToken<TagDataWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the tag with the specified ID (asynchronously)
     * 
     * @param tagId  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTagOnItemAsync(Integer tagId, Integer id, List<String> include, final ApiCallback<TagDataWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTagOnItemValidateBeforeCall(tagId, id, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TagDataWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTagsOnItem
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTagsOnItemCall(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/tags"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTagsOnItemValidateBeforeCall(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTagsOnItem(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTagsOnItemCall(id, startAt, maxResults, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all tags for the item with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return TagDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TagDataListWrapper getTagsOnItem(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        ApiResponse<TagDataListWrapper> resp = getTagsOnItemWithHttpInfo(id, startAt, maxResults, include);
        return resp.getData();
    }

    /**
     * Get all tags for the item with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;TagDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TagDataListWrapper> getTagsOnItemWithHttpInfo(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getTagsOnItemValidateBeforeCall(id, startAt, maxResults, include, null, null);
        Type localVarReturnType = new TypeToken<TagDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all tags for the item with the specified ID (asynchronously)
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTagsOnItemAsync(Integer id, Integer startAt, Integer maxResults, List<String> include, final ApiCallback<TagDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTagsOnItemValidateBeforeCall(id, startAt, maxResults, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TagDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestCaseById
     * @param testCaseId  (required)
     * @param testGroupId  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestCaseByIdCall(Integer testCaseId, Integer testGroupId, Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/testgroups/{testGroupId}/testcases/{testCaseId}"
            .replaceAll("\\{" + "testCaseId" + "\\}", apiClient.escapeString(testCaseId.toString()))
            .replaceAll("\\{" + "testGroupId" + "\\}", apiClient.escapeString(testGroupId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestCaseByIdValidateBeforeCall(Integer testCaseId, Integer testGroupId, Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'testCaseId' is set
        if (testCaseId == null) {
            throw new ApiException("Missing the required parameter 'testCaseId' when calling getTestCaseById(Async)");
        }
        
        // verify the required parameter 'testGroupId' is set
        if (testGroupId == null) {
            throw new ApiException("Missing the required parameter 'testGroupId' when calling getTestCaseById(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTestCaseById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestCaseByIdCall(testCaseId, testGroupId, id, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the test case with the specified ID
     * 
     * @param testCaseId  (required)
     * @param testGroupId  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ItemDataWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemDataWrapper getTestCaseById(Integer testCaseId, Integer testGroupId, Integer id, List<String> include) throws ApiException {
        ApiResponse<ItemDataWrapper> resp = getTestCaseByIdWithHttpInfo(testCaseId, testGroupId, id, include);
        return resp.getData();
    }

    /**
     * Get the test case with the specified ID
     * 
     * @param testCaseId  (required)
     * @param testGroupId  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;ItemDataWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemDataWrapper> getTestCaseByIdWithHttpInfo(Integer testCaseId, Integer testGroupId, Integer id, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getTestCaseByIdValidateBeforeCall(testCaseId, testGroupId, id, include, null, null);
        Type localVarReturnType = new TypeToken<ItemDataWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the test case with the specified ID (asynchronously)
     * 
     * @param testCaseId  (required)
     * @param testGroupId  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestCaseByIdAsync(Integer testCaseId, Integer testGroupId, Integer id, List<String> include, final ApiCallback<ItemDataWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestCaseByIdValidateBeforeCall(testCaseId, testGroupId, id, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemDataWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestCases
     * @param testGroupId  (required)
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestCasesCall(Integer testGroupId, Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/testgroups/{testGroupId}/testcases"
            .replaceAll("\\{" + "testGroupId" + "\\}", apiClient.escapeString(testGroupId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestCasesValidateBeforeCall(Integer testGroupId, Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'testGroupId' is set
        if (testGroupId == null) {
            throw new ApiException("Missing the required parameter 'testGroupId' when calling getTestCases(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTestCases(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestCasesCall(testGroupId, id, startAt, maxResults, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all test cases associated with the test group with the specified ID
     * 
     * @param testGroupId  (required)
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ItemDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemDataListWrapper getTestCases(Integer testGroupId, Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        ApiResponse<ItemDataListWrapper> resp = getTestCasesWithHttpInfo(testGroupId, id, startAt, maxResults, include);
        return resp.getData();
    }

    /**
     * Get all test cases associated with the test group with the specified ID
     * 
     * @param testGroupId  (required)
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;ItemDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemDataListWrapper> getTestCasesWithHttpInfo(Integer testGroupId, Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getTestCasesValidateBeforeCall(testGroupId, id, startAt, maxResults, include, null, null);
        Type localVarReturnType = new TypeToken<ItemDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all test cases associated with the test group with the specified ID (asynchronously)
     * 
     * @param testGroupId  (required)
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestCasesAsync(Integer testGroupId, Integer id, Integer startAt, Integer maxResults, List<String> include, final ApiCallback<ItemDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestCasesValidateBeforeCall(testGroupId, id, startAt, maxResults, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestCycles
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestCyclesCall(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/testcycles"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestCyclesValidateBeforeCall(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTestCycles(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestCyclesCall(id, startAt, maxResults, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all test cycles for the test plan with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return TestCycleDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestCycleDataListWrapper getTestCycles(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        ApiResponse<TestCycleDataListWrapper> resp = getTestCyclesWithHttpInfo(id, startAt, maxResults, include);
        return resp.getData();
    }

    /**
     * Get all test cycles for the test plan with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;TestCycleDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestCycleDataListWrapper> getTestCyclesWithHttpInfo(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getTestCyclesValidateBeforeCall(id, startAt, maxResults, include, null, null);
        Type localVarReturnType = new TypeToken<TestCycleDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all test cycles for the test plan with the specified ID (asynchronously)
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestCyclesAsync(Integer id, Integer startAt, Integer maxResults, List<String> include, final ApiCallback<TestCycleDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestCyclesValidateBeforeCall(id, startAt, maxResults, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestCycleDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestGroupById
     * @param testGroupId  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestGroupByIdCall(Integer testGroupId, Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/testgroups/{testGroupId}"
            .replaceAll("\\{" + "testGroupId" + "\\}", apiClient.escapeString(testGroupId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestGroupByIdValidateBeforeCall(Integer testGroupId, Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'testGroupId' is set
        if (testGroupId == null) {
            throw new ApiException("Missing the required parameter 'testGroupId' when calling getTestGroupById(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTestGroupById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestGroupByIdCall(testGroupId, id, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the test group with the specified ID
     * 
     * @param testGroupId  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return TestGroupDataWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestGroupDataWrapper getTestGroupById(Integer testGroupId, Integer id, List<String> include) throws ApiException {
        ApiResponse<TestGroupDataWrapper> resp = getTestGroupByIdWithHttpInfo(testGroupId, id, include);
        return resp.getData();
    }

    /**
     * Get the test group with the specified ID
     * 
     * @param testGroupId  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;TestGroupDataWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestGroupDataWrapper> getTestGroupByIdWithHttpInfo(Integer testGroupId, Integer id, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getTestGroupByIdValidateBeforeCall(testGroupId, id, include, null, null);
        Type localVarReturnType = new TypeToken<TestGroupDataWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the test group with the specified ID (asynchronously)
     * 
     * @param testGroupId  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestGroupByIdAsync(Integer testGroupId, Integer id, List<String> include, final ApiCallback<TestGroupDataWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestGroupByIdValidateBeforeCall(testGroupId, id, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestGroupDataWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestGroups
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestGroupsCall(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/testgroups"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestGroupsValidateBeforeCall(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTestGroups(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestGroupsCall(id, startAt, maxResults, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all test groups for the test plan with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return TestGroupDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestGroupDataListWrapper getTestGroups(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        ApiResponse<TestGroupDataListWrapper> resp = getTestGroupsWithHttpInfo(id, startAt, maxResults, include);
        return resp.getData();
    }

    /**
     * Get all test groups for the test plan with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;TestGroupDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestGroupDataListWrapper> getTestGroupsWithHttpInfo(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getTestGroupsValidateBeforeCall(id, startAt, maxResults, include, null, null);
        Type localVarReturnType = new TypeToken<TestGroupDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all test groups for the test plan with the specified ID (asynchronously)
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestGroupsAsync(Integer id, Integer startAt, Integer maxResults, List<String> include, final ApiCallback<TestGroupDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestGroupsValidateBeforeCall(id, startAt, maxResults, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestGroupDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestPlan
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestPlanCall(Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestPlanValidateBeforeCall(Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTestPlan(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestPlanCall(id, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the test plan with the specified ID
     * 
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return TestPlanDataWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestPlanDataWrapper getTestPlan(Integer id, List<String> include) throws ApiException {
        ApiResponse<TestPlanDataWrapper> resp = getTestPlanWithHttpInfo(id, include);
        return resp.getData();
    }

    /**
     * Get the test plan with the specified ID
     * 
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;TestPlanDataWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestPlanDataWrapper> getTestPlanWithHttpInfo(Integer id, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getTestPlanValidateBeforeCall(id, include, null, null);
        Type localVarReturnType = new TypeToken<TestPlanDataWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the test plan with the specified ID (asynchronously)
     * 
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestPlanAsync(Integer id, List<String> include, final ApiCallback<TestPlanDataWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestPlanValidateBeforeCall(id, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestPlanDataWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestPlans
     * @param project  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestPlansCall(Integer project, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (project != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("project", project));
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestPlansValidateBeforeCall(Integer project, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling getTestPlans(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestPlansCall(project, startAt, maxResults, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all test plans in the project with the specified ID
     * 
     * @param project  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return TestPlanDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestPlanDataListWrapper getTestPlans(Integer project, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        ApiResponse<TestPlanDataListWrapper> resp = getTestPlansWithHttpInfo(project, startAt, maxResults, include);
        return resp.getData();
    }

    /**
     * Get all test plans in the project with the specified ID
     * 
     * @param project  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;TestPlanDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestPlanDataListWrapper> getTestPlansWithHttpInfo(Integer project, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getTestPlansValidateBeforeCall(project, startAt, maxResults, include, null, null);
        Type localVarReturnType = new TypeToken<TestPlanDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all test plans in the project with the specified ID (asynchronously)
     * 
     * @param project  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestPlansAsync(Integer project, Integer startAt, Integer maxResults, List<String> include, final ApiCallback<TestPlanDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestPlansValidateBeforeCall(project, startAt, maxResults, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestPlanDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUpstreamRelated
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUpstreamRelatedCall(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/upstreamrelated"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUpstreamRelatedValidateBeforeCall(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUpstreamRelated(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUpstreamRelatedCall(id, startAt, maxResults, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all upstream related items for the test plan with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return AbstractItemDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractItemDataListWrapper getUpstreamRelated(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        ApiResponse<AbstractItemDataListWrapper> resp = getUpstreamRelatedWithHttpInfo(id, startAt, maxResults, include);
        return resp.getData();
    }

    /**
     * Get all upstream related items for the test plan with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;AbstractItemDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractItemDataListWrapper> getUpstreamRelatedWithHttpInfo(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getUpstreamRelatedValidateBeforeCall(id, startAt, maxResults, include, null, null);
        Type localVarReturnType = new TypeToken<AbstractItemDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all upstream related items for the test plan with the specified ID (asynchronously)
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUpstreamRelatedAsync(Integer id, Integer startAt, Integer maxResults, List<String> include, final ApiCallback<AbstractItemDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUpstreamRelatedValidateBeforeCall(id, startAt, maxResults, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractItemDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUpstreamRelationships
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUpstreamRelationshipsCall(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/upstreamrelationships"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUpstreamRelationshipsValidateBeforeCall(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUpstreamRelationships(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUpstreamRelationshipsCall(id, startAt, maxResults, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all upstream relationships for the test plan with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return RelationshipDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RelationshipDataListWrapper getUpstreamRelationships(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        ApiResponse<RelationshipDataListWrapper> resp = getUpstreamRelationshipsWithHttpInfo(id, startAt, maxResults, include);
        return resp.getData();
    }

    /**
     * Get all upstream relationships for the test plan with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;RelationshipDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RelationshipDataListWrapper> getUpstreamRelationshipsWithHttpInfo(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getUpstreamRelationshipsValidateBeforeCall(id, startAt, maxResults, include, null, null);
        Type localVarReturnType = new TypeToken<RelationshipDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all upstream relationships for the test plan with the specified ID (asynchronously)
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUpstreamRelationshipsAsync(Integer id, Integer startAt, Integer maxResults, List<String> include, final ApiCallback<RelationshipDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUpstreamRelationshipsValidateBeforeCall(id, startAt, maxResults, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RelationshipDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVersionOnItem4
     * @param versionNum  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVersionOnItem4Call(Integer versionNum, Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/versions/{versionNum}"
            .replaceAll("\\{" + "versionNum" + "\\}", apiClient.escapeString(versionNum.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVersionOnItem4ValidateBeforeCall(Integer versionNum, Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'versionNum' is set
        if (versionNum == null) {
            throw new ApiException("Missing the required parameter 'versionNum' when calling getVersionOnItem4(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVersionOnItem4(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getVersionOnItem4Call(versionNum, id, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the numbered version for the item with the specified ID
     * 
     * @param versionNum  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return VersionDataWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionDataWrapper getVersionOnItem4(Integer versionNum, Integer id, List<String> include) throws ApiException {
        ApiResponse<VersionDataWrapper> resp = getVersionOnItem4WithHttpInfo(versionNum, id, include);
        return resp.getData();
    }

    /**
     * Get the numbered version for the item with the specified ID
     * 
     * @param versionNum  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;VersionDataWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionDataWrapper> getVersionOnItem4WithHttpInfo(Integer versionNum, Integer id, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getVersionOnItem4ValidateBeforeCall(versionNum, id, include, null, null);
        Type localVarReturnType = new TypeToken<VersionDataWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the numbered version for the item with the specified ID (asynchronously)
     * 
     * @param versionNum  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionOnItem4Async(Integer versionNum, Integer id, List<String> include, final ApiCallback<VersionDataWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionOnItem4ValidateBeforeCall(versionNum, id, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionDataWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVersionedItem4
     * @param versionNum  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVersionedItem4Call(Integer versionNum, Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/versions/{versionNum}/versioneditem"
            .replaceAll("\\{" + "versionNum" + "\\}", apiClient.escapeString(versionNum.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVersionedItem4ValidateBeforeCall(Integer versionNum, Integer id, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'versionNum' is set
        if (versionNum == null) {
            throw new ApiException("Missing the required parameter 'versionNum' when calling getVersionedItem4(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVersionedItem4(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getVersionedItem4Call(versionNum, id, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the  snapshot of the test plan at the specified version
     * 
     * @param versionNum  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return VersionedTestPlanDataWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionedTestPlanDataWrapper getVersionedItem4(Integer versionNum, Integer id, List<String> include) throws ApiException {
        ApiResponse<VersionedTestPlanDataWrapper> resp = getVersionedItem4WithHttpInfo(versionNum, id, include);
        return resp.getData();
    }

    /**
     * Get the  snapshot of the test plan at the specified version
     * 
     * @param versionNum  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;VersionedTestPlanDataWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionedTestPlanDataWrapper> getVersionedItem4WithHttpInfo(Integer versionNum, Integer id, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getVersionedItem4ValidateBeforeCall(versionNum, id, include, null, null);
        Type localVarReturnType = new TypeToken<VersionedTestPlanDataWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the  snapshot of the test plan at the specified version (asynchronously)
     * 
     * @param versionNum  (required)
     * @param id  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionedItem4Async(Integer versionNum, Integer id, List<String> include, final ApiCallback<VersionedTestPlanDataWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionedItem4ValidateBeforeCall(versionNum, id, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionedTestPlanDataWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVersionsOnItem4
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVersionsOnItem4Call(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/versions"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVersionsOnItem4ValidateBeforeCall(Integer id, Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVersionsOnItem4(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getVersionsOnItem4Call(id, startAt, maxResults, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all versions for the item with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return VersionDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionDataListWrapper getVersionsOnItem4(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        ApiResponse<VersionDataListWrapper> resp = getVersionsOnItem4WithHttpInfo(id, startAt, maxResults, include);
        return resp.getData();
    }

    /**
     * Get all versions for the item with the specified ID
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;VersionDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionDataListWrapper> getVersionsOnItem4WithHttpInfo(Integer id, Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getVersionsOnItem4ValidateBeforeCall(id, startAt, maxResults, include, null, null);
        Type localVarReturnType = new TypeToken<VersionDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all versions for the item with the specified ID (asynchronously)
     * 
     * @param id  (required)
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionsOnItem4Async(Integer id, Integer startAt, Integer maxResults, List<String> include, final ApiCallback<VersionDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionsOnItem4ValidateBeforeCall(id, startAt, maxResults, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchTestPlan
     * @param body  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchTestPlanCall(List<RequestPatchOperation> body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchTestPlanValidateBeforeCall(List<RequestPatchOperation> body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling patchTestPlan(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling patchTestPlan(Async)");
        }
        
        
        com.squareup.okhttp.Call call = patchTestPlanCall(body, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the test plan with the specified ID
     * 
     * @param body  (required)
     * @param id  (required)
     * @return AbstractRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractRestResponse patchTestPlan(List<RequestPatchOperation> body, Integer id) throws ApiException {
        ApiResponse<AbstractRestResponse> resp = patchTestPlanWithHttpInfo(body, id);
        return resp.getData();
    }

    /**
     * Update the test plan with the specified ID
     * 
     * @param body  (required)
     * @param id  (required)
     * @return ApiResponse&lt;AbstractRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractRestResponse> patchTestPlanWithHttpInfo(List<RequestPatchOperation> body, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = patchTestPlanValidateBeforeCall(body, id, null, null);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the test plan with the specified ID (asynchronously)
     * 
     * @param body  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchTestPlanAsync(List<RequestPatchOperation> body, Integer id, final ApiCallback<AbstractRestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchTestPlanValidateBeforeCall(body, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postTestCase
     * @param body  (required)
     * @param testGroupId  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postTestCaseCall(RequestTestGroupTestCase body, Integer testGroupId, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/testgroups/{testGroupId}/testcases"
            .replaceAll("\\{" + "testGroupId" + "\\}", apiClient.escapeString(testGroupId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postTestCaseValidateBeforeCall(RequestTestGroupTestCase body, Integer testGroupId, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postTestCase(Async)");
        }
        
        // verify the required parameter 'testGroupId' is set
        if (testGroupId == null) {
            throw new ApiException("Missing the required parameter 'testGroupId' when calling postTestCase(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postTestCase(Async)");
        }
        
        
        com.squareup.okhttp.Call call = postTestCaseCall(body, testGroupId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add an existing test case to the test group with the specified ID
     * 
     * @param body  (required)
     * @param testGroupId  (required)
     * @param id  (required)
     * @return CreatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreatedResponse postTestCase(RequestTestGroupTestCase body, Integer testGroupId, Integer id) throws ApiException {
        ApiResponse<CreatedResponse> resp = postTestCaseWithHttpInfo(body, testGroupId, id);
        return resp.getData();
    }

    /**
     * Add an existing test case to the test group with the specified ID
     * 
     * @param body  (required)
     * @param testGroupId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;CreatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreatedResponse> postTestCaseWithHttpInfo(RequestTestGroupTestCase body, Integer testGroupId, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = postTestCaseValidateBeforeCall(body, testGroupId, id, null, null);
        Type localVarReturnType = new TypeToken<CreatedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add an existing test case to the test group with the specified ID (asynchronously)
     * 
     * @param body  (required)
     * @param testGroupId  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postTestCaseAsync(RequestTestGroupTestCase body, Integer testGroupId, Integer id, final ApiCallback<CreatedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTestCaseValidateBeforeCall(body, testGroupId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeAttachmentFromItem
     * @param attachmentId  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeAttachmentFromItemCall(Integer attachmentId, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/attachments/{attachmentId}"
            .replaceAll("\\{" + "attachmentId" + "\\}", apiClient.escapeString(attachmentId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeAttachmentFromItemValidateBeforeCall(Integer attachmentId, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling removeAttachmentFromItem(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeAttachmentFromItem(Async)");
        }
        
        
        com.squareup.okhttp.Call call = removeAttachmentFromItemCall(attachmentId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove an existing attachment from the item
     * 
     * @param attachmentId  (required)
     * @param id  (required)
     * @return AbstractRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractRestResponse removeAttachmentFromItem(Integer attachmentId, Integer id) throws ApiException {
        ApiResponse<AbstractRestResponse> resp = removeAttachmentFromItemWithHttpInfo(attachmentId, id);
        return resp.getData();
    }

    /**
     * Remove an existing attachment from the item
     * 
     * @param attachmentId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;AbstractRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractRestResponse> removeAttachmentFromItemWithHttpInfo(Integer attachmentId, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = removeAttachmentFromItemValidateBeforeCall(attachmentId, id, null, null);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove an existing attachment from the item (asynchronously)
     * 
     * @param attachmentId  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeAttachmentFromItemAsync(Integer attachmentId, Integer id, final ApiCallback<AbstractRestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeAttachmentFromItemValidateBeforeCall(attachmentId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeTagFromItem
     * @param tagId  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeTagFromItemCall(Integer tagId, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/tags/{tagId}"
            .replaceAll("\\{" + "tagId" + "\\}", apiClient.escapeString(tagId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeTagFromItemValidateBeforeCall(Integer tagId, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling removeTagFromItem(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeTagFromItem(Async)");
        }
        
        
        com.squareup.okhttp.Call call = removeTagFromItemCall(tagId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove an existing tag from the item with the specified ID
     * 
     * @param tagId  (required)
     * @param id  (required)
     * @return AbstractRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractRestResponse removeTagFromItem(Integer tagId, Integer id) throws ApiException {
        ApiResponse<AbstractRestResponse> resp = removeTagFromItemWithHttpInfo(tagId, id);
        return resp.getData();
    }

    /**
     * Remove an existing tag from the item with the specified ID
     * 
     * @param tagId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;AbstractRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractRestResponse> removeTagFromItemWithHttpInfo(Integer tagId, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = removeTagFromItemValidateBeforeCall(tagId, id, null, null);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove an existing tag from the item with the specified ID (asynchronously)
     * 
     * @param tagId  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeTagFromItemAsync(Integer tagId, Integer id, final ApiCallback<AbstractRestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeTagFromItemValidateBeforeCall(tagId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for toggleArchivedStatus
     * @param body  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call toggleArchivedStatusCall(RequestArchivedStatus body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/archived"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call toggleArchivedStatusValidateBeforeCall(RequestArchivedStatus body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling toggleArchivedStatus(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling toggleArchivedStatus(Async)");
        }
        
        
        com.squareup.okhttp.Call call = toggleArchivedStatusCall(body, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the archived status of the test plan
     * 
     * @param body  (required)
     * @param id  (required)
     * @return AbstractRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractRestResponse toggleArchivedStatus(RequestArchivedStatus body, Integer id) throws ApiException {
        ApiResponse<AbstractRestResponse> resp = toggleArchivedStatusWithHttpInfo(body, id);
        return resp.getData();
    }

    /**
     * Update the archived status of the test plan
     * 
     * @param body  (required)
     * @param id  (required)
     * @return ApiResponse&lt;AbstractRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractRestResponse> toggleArchivedStatusWithHttpInfo(RequestArchivedStatus body, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = toggleArchivedStatusValidateBeforeCall(body, id, null, null);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the archived status of the test plan (asynchronously)
     * 
     * @param body  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call toggleArchivedStatusAsync(RequestArchivedStatus body, Integer id, final ApiCallback<AbstractRestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = toggleArchivedStatusValidateBeforeCall(body, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateItemLink
     * @param linkId  (required)
     * @param body  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateItemLinkCall(Integer linkId, RequestLink body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/links/{linkId}"
            .replaceAll("\\{" + "linkId" + "\\}", apiClient.escapeString(linkId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateItemLinkValidateBeforeCall(Integer linkId, RequestLink body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling updateItemLink(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateItemLink(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateItemLink(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateItemLinkCall(linkId, body, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the link with the specified ID
     * 
     * @param linkId  (required)
     * @param body  (required)
     * @param id  (required)
     * @return AbstractRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractRestResponse updateItemLink(Integer linkId, RequestLink body, Integer id) throws ApiException {
        ApiResponse<AbstractRestResponse> resp = updateItemLinkWithHttpInfo(linkId, body, id);
        return resp.getData();
    }

    /**
     * Update the link with the specified ID
     * 
     * @param linkId  (required)
     * @param body  (required)
     * @param id  (required)
     * @return ApiResponse&lt;AbstractRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractRestResponse> updateItemLinkWithHttpInfo(Integer linkId, RequestLink body, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = updateItemLinkValidateBeforeCall(linkId, body, id, null, null);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the link with the specified ID (asynchronously)
     * 
     * @param linkId  (required)
     * @param body  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateItemLinkAsync(Integer linkId, RequestLink body, Integer id, final ApiCallback<AbstractRestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateItemLinkValidateBeforeCall(linkId, body, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLock
     * @param body  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLockCall(RequestLock body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/lock"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLockValidateBeforeCall(RequestLock body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLock(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateLock(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateLockCall(body, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the locked state of the item with the specified ID
     * 
     * @param body  (required)
     * @param id  (required)
     * @return AbstractRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractRestResponse updateLock(RequestLock body, Integer id) throws ApiException {
        ApiResponse<AbstractRestResponse> resp = updateLockWithHttpInfo(body, id);
        return resp.getData();
    }

    /**
     * Update the locked state of the item with the specified ID
     * 
     * @param body  (required)
     * @param id  (required)
     * @return ApiResponse&lt;AbstractRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractRestResponse> updateLockWithHttpInfo(RequestLock body, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = updateLockValidateBeforeCall(body, id, null, null);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the locked state of the item with the specified ID (asynchronously)
     * 
     * @param body  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLockAsync(RequestLock body, Integer id, final ApiCallback<AbstractRestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLockValidateBeforeCall(body, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTestGroup
     * @param testGroupId  (required)
     * @param body  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTestGroupCall(Integer testGroupId, RequestTestGroup body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}/testgroups/{testGroupId}"
            .replaceAll("\\{" + "testGroupId" + "\\}", apiClient.escapeString(testGroupId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTestGroupValidateBeforeCall(Integer testGroupId, RequestTestGroup body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'testGroupId' is set
        if (testGroupId == null) {
            throw new ApiException("Missing the required parameter 'testGroupId' when calling updateTestGroup(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTestGroup(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTestGroup(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateTestGroupCall(testGroupId, body, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the test group with the specified ID
     * 
     * @param testGroupId  (required)
     * @param body  (required)
     * @param id  (required)
     * @return AbstractRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractRestResponse updateTestGroup(Integer testGroupId, RequestTestGroup body, Integer id) throws ApiException {
        ApiResponse<AbstractRestResponse> resp = updateTestGroupWithHttpInfo(testGroupId, body, id);
        return resp.getData();
    }

    /**
     * Update the test group with the specified ID
     * 
     * @param testGroupId  (required)
     * @param body  (required)
     * @param id  (required)
     * @return ApiResponse&lt;AbstractRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractRestResponse> updateTestGroupWithHttpInfo(Integer testGroupId, RequestTestGroup body, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = updateTestGroupValidateBeforeCall(testGroupId, body, id, null, null);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the test group with the specified ID (asynchronously)
     * 
     * @param testGroupId  (required)
     * @param body  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTestGroupAsync(Integer testGroupId, RequestTestGroup body, Integer id, final ApiCallback<AbstractRestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTestGroupValidateBeforeCall(testGroupId, body, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTestPlan
     * @param body  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTestPlanCall(RequestTestPlan body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/testplans/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTestPlanValidateBeforeCall(RequestTestPlan body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTestPlan(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTestPlan(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateTestPlanCall(body, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the test plan with the specified ID
     * 
     * @param body  (required)
     * @param id  (required)
     * @return AbstractRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractRestResponse updateTestPlan(RequestTestPlan body, Integer id) throws ApiException {
        ApiResponse<AbstractRestResponse> resp = updateTestPlanWithHttpInfo(body, id);
        return resp.getData();
    }

    /**
     * Update the test plan with the specified ID
     * 
     * @param body  (required)
     * @param id  (required)
     * @return ApiResponse&lt;AbstractRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractRestResponse> updateTestPlanWithHttpInfo(RequestTestPlan body, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = updateTestPlanValidateBeforeCall(body, id, null, null);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the test plan with the specified ID (asynchronously)
     * 
     * @param body  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTestPlanAsync(RequestTestPlan body, Integer id, final ApiCallback<AbstractRestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTestPlanValidateBeforeCall(body, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractRestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
