/*
 * Jama REST API
 * This is the documentation for the Jama REST API.
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ItemTypeDataListWrapper;
import io.swagger.client.model.ItemTypeDataWrapper;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ItemtypesApi {
    private ApiClient apiClient;

    public ItemtypesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ItemtypesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getItem
     * @param itemTypeId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemCall(Integer itemTypeId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/itemtypes/{itemTypeId}"
            .replaceAll("\\{" + "itemTypeId" + "\\}", apiClient.escapeString(itemTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemValidateBeforeCall(Integer itemTypeId, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemTypeId' is set
        if (itemTypeId == null) {
            throw new ApiException("Missing the required parameter 'itemTypeId' when calling getItem(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getItemCall(itemTypeId, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the item type with the specified ID
     * 
     * @param itemTypeId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ItemTypeDataWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemTypeDataWrapper getItem(Integer itemTypeId, List<String> include) throws ApiException {
        ApiResponse<ItemTypeDataWrapper> resp = getItemWithHttpInfo(itemTypeId, include);
        return resp.getData();
    }

    /**
     * Get the item type with the specified ID
     * 
     * @param itemTypeId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;ItemTypeDataWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemTypeDataWrapper> getItemWithHttpInfo(Integer itemTypeId, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getItemValidateBeforeCall(itemTypeId, include, null, null);
        Type localVarReturnType = new TypeToken<ItemTypeDataWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the item type with the specified ID (asynchronously)
     * 
     * @param itemTypeId  (required)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemAsync(Integer itemTypeId, List<String> include, final ApiCallback<ItemTypeDataWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemValidateBeforeCall(itemTypeId, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemTypeDataWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getItemTypes
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getItemTypesCall(Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/itemtypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startAt", startAt));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemTypesValidateBeforeCall(Integer startAt, Integer maxResults, List<String> include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getItemTypesCall(startAt, maxResults, include, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all item types
     * 
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ItemTypeDataListWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemTypeDataListWrapper getItemTypes(Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        ApiResponse<ItemTypeDataListWrapper> resp = getItemTypesWithHttpInfo(startAt, maxResults, include);
        return resp.getData();
    }

    /**
     * Get all item types
     * 
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @return ApiResponse&lt;ItemTypeDataListWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemTypeDataListWrapper> getItemTypesWithHttpInfo(Integer startAt, Integer maxResults, List<String> include) throws ApiException {
        com.squareup.okhttp.Call call = getItemTypesValidateBeforeCall(startAt, maxResults, include, null, null);
        Type localVarReturnType = new TypeToken<ItemTypeDataListWrapper>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all item types (asynchronously)
     * 
     * @param startAt  (optional)
     * @param maxResults If not set, this defaults to 20. This cannot be larger than 50 (optional)
     * @param include Links to include as full objects in the linked map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemTypesAsync(Integer startAt, Integer maxResults, List<String> include, final ApiCallback<ItemTypeDataListWrapper> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemTypesValidateBeforeCall(startAt, maxResults, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemTypeDataListWrapper>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
