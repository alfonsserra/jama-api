/*
 * Jama REST API
 * This is the documentation for the Jama REST API.
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AbstractRestResponse;
import io.swagger.client.model.CreatedResponse;
import io.swagger.client.model.ItemDataListWrapper;
import io.swagger.client.model.RequestTag;
import io.swagger.client.model.TagDataListWrapper;
import io.swagger.client.model.TagDataWrapper;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TagsApi
 */
@Ignore
public class TagsApiTest {

    private final TagsApi api = new TagsApi();

    
    /**
     * Create a new tag in the project with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTagToProjectTest() throws ApiException {
        RequestTag body = null;
        CreatedResponse response = api.addTagToProject(body);

        // TODO: test validations
    }
    
    /**
     * Delete the tag with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTagTest() throws ApiException {
        Integer id = null;
        AbstractRestResponse response = api.deleteTag(id);

        // TODO: test validations
    }
    
    /**
     * Get all items that have the tag with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemsUsingTagTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        ItemDataListWrapper response = api.getItemsUsingTag(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get the tag with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTagTest() throws ApiException {
        Integer id = null;
        List<String> include = null;
        TagDataWrapper response = api.getTag(id, include);

        // TODO: test validations
    }
    
    /**
     * Get all tags for the project with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTagsInProjectTest() throws ApiException {
        Integer project = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        TagDataListWrapper response = api.getTagsInProject(project, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Update the tag with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putTagTest() throws ApiException {
        RequestTag body = null;
        Integer id = null;
        AbstractRestResponse response = api.putTag(body, id);

        // TODO: test validations
    }
    
}
