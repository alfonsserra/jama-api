/*
 * Jama REST API
 * This is the documentation for the Jama REST API.
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AbstractRestResponse;
import io.swagger.client.model.ActivityDataListWrapper;
import io.swagger.client.model.AttachmentDataListWrapper;
import io.swagger.client.model.CommentDataListWrapper;
import io.swagger.client.model.CreatedResponse;
import io.swagger.client.model.DuplicateConfig;
import io.swagger.client.model.ItemDataListWrapper;
import io.swagger.client.model.ItemDataWrapper;
import io.swagger.client.model.LinkDataListWrapper;
import io.swagger.client.model.LinkDataWrapper;
import io.swagger.client.model.LocationDataWrapper;
import io.swagger.client.model.LockDataWrapper;
import io.swagger.client.model.RelationshipDataListWrapper;
import io.swagger.client.model.RequestItem;
import io.swagger.client.model.RequestItemAttachment;
import io.swagger.client.model.RequestItemSyncedItem;
import io.swagger.client.model.RequestItemTag;
import io.swagger.client.model.RequestLink;
import io.swagger.client.model.RequestLock;
import io.swagger.client.model.RequestMoveLocation;
import io.swagger.client.model.RequestPatchOperation;
import io.swagger.client.model.RequestTransition;
import io.swagger.client.model.SyncStatusDataWrapper;
import io.swagger.client.model.TagDataListWrapper;
import io.swagger.client.model.TagDataWrapper;
import io.swagger.client.model.VersionDataListWrapper;
import io.swagger.client.model.VersionDataWrapper;
import io.swagger.client.model.VersionedItemDataWrapper;
import io.swagger.client.model.WorkflowTransitionDataListWrapper;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ItemsApi
 */
@Ignore
public class ItemsApiTest {

    private final ItemsApi api = new ItemsApi();

    
    /**
     * Add an existing attachment to the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addAttachmentToItemTest() throws ApiException {
        RequestItemAttachment body = null;
        Integer id = null;
        CreatedResponse response = api.addAttachmentToItem(body, id);

        // TODO: test validations
    }
    
    /**
     * Create a new item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemTest() throws ApiException {
        RequestItem body = null;
        Boolean setGlobalIdManually = null;
        CreatedResponse response = api.addItem(body, setGlobalIdManually);

        // TODO: test validations
    }
    
    /**
     * Create a new link for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemLinkTest() throws ApiException {
        RequestLink body = null;
        Integer id = null;
        CreatedResponse response = api.addItemLink(body, id);

        // TODO: test validations
    }
    
    /**
     * Add an existing tag to the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTagToItemTest() throws ApiException {
        RequestItemTag body = null;
        Integer id = null;
        CreatedResponse response = api.addTagToItem(body, id);

        // TODO: test validations
    }
    
    /**
     * Remove an existing item from the Global ID pool of the item with the specified ID (break sync)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void breakSyncOnItemTest() throws ApiException {
        Integer syncedItemId = null;
        Integer id = null;
        AbstractRestResponse response = api.breakSyncOnItem(syncedItemId, id);

        // TODO: test validations
    }
    
    /**
     * Add an existing item to the Global ID pool of the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectItemToGlobalIDPoolTest() throws ApiException {
        RequestItemSyncedItem body = null;
        Integer id = null;
        CreatedResponse response = api.connectItemToGlobalIDPool(body, id);

        // TODO: test validations
    }
    
    /**
     * Delete the item with the specified ID (item becomes inactive and can be un-deleted if necessary)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemTest() throws ApiException {
        Integer id = null;
        AbstractRestResponse response = api.deleteItem(id);

        // TODO: test validations
    }
    
    /**
     * Delete the link with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemLinkTest() throws ApiException {
        Integer linkId = null;
        Integer id = null;
        AbstractRestResponse response = api.deleteItemLink(linkId, id);

        // TODO: test validations
    }
    
    /**
     * Create a duplicate of item
     *
     * Copies the name and description fields. Only items without children can be have a duplicate created.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void duplicateItemTest() throws ApiException {
        Integer id = null;
        DuplicateConfig body = null;
        CreatedResponse response = api.duplicateItem(id, body);

        // TODO: test validations
    }
    
    /**
     * Executes a workflow transition for the item with the specified ID. Valid transitions can be found at /items/{id}/workflowtransitionoptions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeTransitionTest() throws ApiException {
        RequestTransition body = null;
        Integer id = null;
        CreatedResponse response = api.executeTransition(body, id);

        // TODO: test validations
    }
    
    /**
     * Get all activities for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getActivitiesTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        ActivityDataListWrapper response = api.getActivities(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get all attachments for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttachmentsTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        AttachmentDataListWrapper response = api.getAttachments(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get all children items for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChildItemsTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        ItemDataListWrapper response = api.getChildItems(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get all downstream related items for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDownstreamRelatedTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        ItemDataListWrapper response = api.getDownstreamRelated(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get all downstream relationships for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDownstreamRelationshipsTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        RelationshipDataListWrapper response = api.getDownstreamRelationships(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemTest() throws ApiException {
        Integer id = null;
        List<String> include = null;
        ItemDataWrapper response = api.getItem(id, include);

        // TODO: test validations
    }
    
    /**
     * Get all comments for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemCommentsTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        Boolean rootCommentsOnly = null;
        List<String> include = null;
        CommentDataListWrapper response = api.getItemComments(id, startAt, maxResults, rootCommentsOnly, include);

        // TODO: test validations
    }
    
    /**
     * Get all links for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemLinksTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        LinkDataListWrapper response = api.getItemLinks(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get all items in the project with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemsTest() throws ApiException {
        Integer project = null;
        Boolean rootOnly = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        ItemDataListWrapper response = api.getItems(project, rootOnly, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get the link with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLinkByIdTest() throws ApiException {
        Integer linkId = null;
        Integer id = null;
        List<String> include = null;
        LinkDataWrapper response = api.getLinkById(linkId, id, include);

        // TODO: test validations
    }
    
    /**
     * Get the location for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLocationTest() throws ApiException {
        Integer id = null;
        List<String> include = null;
        LocationDataWrapper response = api.getLocation(id, include);

        // TODO: test validations
    }
    
    /**
     * Get the locked state, last locked date, and last locked by user for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLockTest() throws ApiException {
        Integer id = null;
        List<String> include = null;
        LockDataWrapper response = api.getLock(id, include);

        // TODO: test validations
    }
    
    /**
     * Get the parent item for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParentItemTest() throws ApiException {
        Integer id = null;
        List<String> include = null;
        ItemDataWrapper response = api.getParentItem(id, include);

        // TODO: test validations
    }
    
    /**
     * Get all synchronized items for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSyncItemsTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        ItemDataListWrapper response = api.getSyncItems(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get the sync status for the synced item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSyncStatusTest() throws ApiException {
        Integer syncedItemId = null;
        Integer id = null;
        List<String> include = null;
        SyncStatusDataWrapper response = api.getSyncStatus(syncedItemId, id, include);

        // TODO: test validations
    }
    
    /**
     * Get the tag with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTagOnItemTest() throws ApiException {
        Integer tagId = null;
        Integer id = null;
        List<String> include = null;
        TagDataWrapper response = api.getTagOnItem(tagId, id, include);

        // TODO: test validations
    }
    
    /**
     * Get all tags for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTagsOnItemTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        TagDataListWrapper response = api.getTagsOnItem(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get all upstream related items for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUpstreamRelatedTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        ItemDataListWrapper response = api.getUpstreamRelated(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get all upstream relationships for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUpstreamRelationshipsTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        RelationshipDataListWrapper response = api.getUpstreamRelationships(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get the numbered version for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionOnItem2Test() throws ApiException {
        Integer versionNum = null;
        Integer id = null;
        List<String> include = null;
        VersionDataWrapper response = api.getVersionOnItem2(versionNum, id, include);

        // TODO: test validations
    }
    
    /**
     * Get the  snapshot of the item at the specified version
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionedItem2Test() throws ApiException {
        Integer versionNum = null;
        Integer id = null;
        List<String> include = null;
        VersionedItemDataWrapper response = api.getVersionedItem2(versionNum, id, include);

        // TODO: test validations
    }
    
    /**
     * Get all versions for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionsOnItem2Test() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        VersionDataListWrapper response = api.getVersionsOnItem2(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get all valid workflow transitions that can be made on the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWorkflowTransitionOptionsTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        WorkflowTransitionDataListWrapper response = api.getWorkflowTransitionOptions(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Update the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchItemTest() throws ApiException {
        List<RequestPatchOperation> body = null;
        Integer id = null;
        AbstractRestResponse response = api.patchItem(body, id);

        // TODO: test validations
    }
    
    /**
     * Update the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putItemTest() throws ApiException {
        RequestItem body = null;
        Integer id = null;
        Boolean setGlobalIdManually = null;
        AbstractRestResponse response = api.putItem(body, id, setGlobalIdManually);

        // TODO: test validations
    }
    
    /**
     * Remove an existing attachment from the item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeAttachmentFromItemTest() throws ApiException {
        Integer attachmentId = null;
        Integer id = null;
        AbstractRestResponse response = api.removeAttachmentFromItem(attachmentId, id);

        // TODO: test validations
    }
    
    /**
     * Remove an existing tag from the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeTagFromItemTest() throws ApiException {
        Integer tagId = null;
        Integer id = null;
        AbstractRestResponse response = api.removeTagFromItem(tagId, id);

        // TODO: test validations
    }
    
    /**
     * Update the link with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateItemLinkTest() throws ApiException {
        Integer linkId = null;
        RequestLink body = null;
        Integer id = null;
        AbstractRestResponse response = api.updateItemLink(linkId, body, id);

        // TODO: test validations
    }
    
    /**
     * Update the location for the item with the specified ID as an asynchronous request (a successful response signifies that the work was started and a work identifier is given. This identifier will be used in a future feature). Any child items are moved along with this item. Note that this currently only supports moving items between projects
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLocationTest() throws ApiException {
        RequestMoveLocation body = null;
        Integer id = null;
        AbstractRestResponse response = api.updateLocation(body, id);

        // TODO: test validations
    }
    
    /**
     * Update the locked state of the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLockTest() throws ApiException {
        RequestLock body = null;
        Integer id = null;
        AbstractRestResponse response = api.updateLock(body, id);

        // TODO: test validations
    }
    
}
