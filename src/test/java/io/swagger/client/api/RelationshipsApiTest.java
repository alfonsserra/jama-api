/*
 * Jama REST API
 * This is the documentation for the Jama REST API.
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AbstractRestResponse;
import io.swagger.client.model.CreatedResponse;
import io.swagger.client.model.RelationshipDataListWrapper;
import io.swagger.client.model.RelationshipDataWrapper;
import io.swagger.client.model.RequestRelationship;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RelationshipsApi
 */
@Ignore
public class RelationshipsApiTest {

    private final RelationshipsApi api = new RelationshipsApi();

    
    /**
     * Remove an existing suspect link for the relationship with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clearSuspectLinkTest() throws ApiException {
        Integer relationshipId = null;
        AbstractRestResponse response = api.clearSuspectLink(relationshipId);

        // TODO: test validations
    }
    
    /**
     * Create a new relationship
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRelationshipTest() throws ApiException {
        RequestRelationship body = null;
        CreatedResponse response = api.createRelationship(body);

        // TODO: test validations
    }
    
    /**
     * Delete the relationship with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRelationshipTest() throws ApiException {
        Integer relationshipId = null;
        AbstractRestResponse response = api.deleteRelationship(relationshipId);

        // TODO: test validations
    }
    
    /**
     * Get the relationship with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRelationshipTest() throws ApiException {
        Integer relationshipId = null;
        List<String> include = null;
        RelationshipDataWrapper response = api.getRelationship(relationshipId, include);

        // TODO: test validations
    }
    
    /**
     * Get all relationships in the project with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRelationshipsTest() throws ApiException {
        Integer project = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        RelationshipDataListWrapper response = api.getRelationships(project, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Update the relationship with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRelationshipTest() throws ApiException {
        RequestRelationship body = null;
        Integer relationshipId = null;
        AbstractRestResponse response = api.updateRelationship(body, relationshipId);

        // TODO: test validations
    }
    
}
