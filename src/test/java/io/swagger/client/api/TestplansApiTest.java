/*
 * Jama REST API
 * This is the documentation for the Jama REST API.
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AbstractItemDataListWrapper;
import io.swagger.client.model.AbstractRestResponse;
import io.swagger.client.model.ActivityDataListWrapper;
import io.swagger.client.model.AttachmentDataListWrapper;
import io.swagger.client.model.CommentDataListWrapper;
import io.swagger.client.model.CreatedResponse;
import io.swagger.client.model.ItemDataListWrapper;
import io.swagger.client.model.ItemDataWrapper;
import io.swagger.client.model.LinkDataListWrapper;
import io.swagger.client.model.LinkDataWrapper;
import io.swagger.client.model.LockDataWrapper;
import io.swagger.client.model.RelationshipDataListWrapper;
import io.swagger.client.model.RequestArchivedStatus;
import io.swagger.client.model.RequestItemAttachment;
import io.swagger.client.model.RequestItemTag;
import io.swagger.client.model.RequestLink;
import io.swagger.client.model.RequestLock;
import io.swagger.client.model.RequestPatchOperation;
import io.swagger.client.model.RequestTestCycle;
import io.swagger.client.model.RequestTestGroup;
import io.swagger.client.model.RequestTestGroupTestCase;
import io.swagger.client.model.RequestTestPlan;
import io.swagger.client.model.TagDataListWrapper;
import io.swagger.client.model.TagDataWrapper;
import io.swagger.client.model.TestCycleDataListWrapper;
import io.swagger.client.model.TestGroupDataListWrapper;
import io.swagger.client.model.TestGroupDataWrapper;
import io.swagger.client.model.TestPlanDataListWrapper;
import io.swagger.client.model.TestPlanDataWrapper;
import io.swagger.client.model.VersionDataListWrapper;
import io.swagger.client.model.VersionDataWrapper;
import io.swagger.client.model.VersionedTestPlanDataWrapper;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TestplansApi
 */
@Ignore
public class TestplansApiTest {

    private final TestplansApi api = new TestplansApi();

    
    /**
     * Add an existing attachment to the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addAttachmentToItemTest() throws ApiException {
        RequestItemAttachment body = null;
        Integer id = null;
        CreatedResponse response = api.addAttachmentToItem(body, id);

        // TODO: test validations
    }
    
    /**
     * Create a new link for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemLinkTest() throws ApiException {
        RequestLink body = null;
        Integer id = null;
        CreatedResponse response = api.addItemLink(body, id);

        // TODO: test validations
    }
    
    /**
     * Add an existing tag to the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTagToItemTest() throws ApiException {
        RequestItemTag body = null;
        Integer id = null;
        CreatedResponse response = api.addTagToItem(body, id);

        // TODO: test validations
    }
    
    /**
     * Create a new test group to the test plan with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTestGroupTest() throws ApiException {
        RequestTestGroup body = null;
        Integer id = null;
        CreatedResponse response = api.addTestGroup(body, id);

        // TODO: test validations
    }
    
    /**
     * Create a new test cycle
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTestCycleTest() throws ApiException {
        RequestTestCycle body = null;
        Integer id = null;
        CreatedResponse response = api.createTestCycle(body, id);

        // TODO: test validations
    }
    
    /**
     * Create a new test plan
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTestPlanTest() throws ApiException {
        RequestTestPlan body = null;
        CreatedResponse response = api.createTestPlan(body);

        // TODO: test validations
    }
    
    /**
     * Delete the link with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemLinkTest() throws ApiException {
        Integer linkId = null;
        Integer id = null;
        AbstractRestResponse response = api.deleteItemLink(linkId, id);

        // TODO: test validations
    }
    
    /**
     * Remove an existing test case from the test group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTestCaseTest() throws ApiException {
        Integer testCaseId = null;
        Integer testGroupId = null;
        Integer id = null;
        AbstractRestResponse response = api.deleteTestCase(testCaseId, testGroupId, id);

        // TODO: test validations
    }
    
    /**
     * Delete the test group with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTestGroupTest() throws ApiException {
        Integer testGroupId = null;
        Integer id = null;
        AbstractRestResponse response = api.deleteTestGroup(testGroupId, id);

        // TODO: test validations
    }
    
    /**
     * Delete the test plan with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTestPlanTest() throws ApiException {
        Integer id = null;
        AbstractRestResponse response = api.deleteTestPlan(id);

        // TODO: test validations
    }
    
    /**
     * Get all activities for the test plan with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getActivitiesTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        ActivityDataListWrapper response = api.getActivities(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get all attachments for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttachmentsTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        AttachmentDataListWrapper response = api.getAttachments(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get all downstream related items for the test plan with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDownstreamRelatedTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        AbstractItemDataListWrapper response = api.getDownstreamRelated(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get all downstream relationships for the test plan with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDownstreamRelationshipsTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        RelationshipDataListWrapper response = api.getDownstreamRelationships(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get all comments for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemCommentsTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        Boolean rootCommentsOnly = null;
        List<String> include = null;
        CommentDataListWrapper response = api.getItemComments(id, startAt, maxResults, rootCommentsOnly, include);

        // TODO: test validations
    }
    
    /**
     * Get all links for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemLinksTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        LinkDataListWrapper response = api.getItemLinks(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get the link with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLinkByIdTest() throws ApiException {
        Integer linkId = null;
        Integer id = null;
        List<String> include = null;
        LinkDataWrapper response = api.getLinkById(linkId, id, include);

        // TODO: test validations
    }
    
    /**
     * Get the locked state, last locked date, and last locked by user for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLockTest() throws ApiException {
        Integer id = null;
        List<String> include = null;
        LockDataWrapper response = api.getLock(id, include);

        // TODO: test validations
    }
    
    /**
     * Get the tag with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTagOnItemTest() throws ApiException {
        Integer tagId = null;
        Integer id = null;
        List<String> include = null;
        TagDataWrapper response = api.getTagOnItem(tagId, id, include);

        // TODO: test validations
    }
    
    /**
     * Get all tags for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTagsOnItemTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        TagDataListWrapper response = api.getTagsOnItem(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get the test case with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestCaseByIdTest() throws ApiException {
        Integer testCaseId = null;
        Integer testGroupId = null;
        Integer id = null;
        List<String> include = null;
        ItemDataWrapper response = api.getTestCaseById(testCaseId, testGroupId, id, include);

        // TODO: test validations
    }
    
    /**
     * Get all test cases associated with the test group with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestCasesTest() throws ApiException {
        Integer testGroupId = null;
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        ItemDataListWrapper response = api.getTestCases(testGroupId, id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get all test cycles for the test plan with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestCyclesTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        TestCycleDataListWrapper response = api.getTestCycles(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get the test group with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestGroupByIdTest() throws ApiException {
        Integer testGroupId = null;
        Integer id = null;
        List<String> include = null;
        TestGroupDataWrapper response = api.getTestGroupById(testGroupId, id, include);

        // TODO: test validations
    }
    
    /**
     * Get all test groups for the test plan with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestGroupsTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        TestGroupDataListWrapper response = api.getTestGroups(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get the test plan with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestPlanTest() throws ApiException {
        Integer id = null;
        List<String> include = null;
        TestPlanDataWrapper response = api.getTestPlan(id, include);

        // TODO: test validations
    }
    
    /**
     * Get all test plans in the project with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestPlansTest() throws ApiException {
        Integer project = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        TestPlanDataListWrapper response = api.getTestPlans(project, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get all upstream related items for the test plan with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUpstreamRelatedTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        AbstractItemDataListWrapper response = api.getUpstreamRelated(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get all upstream relationships for the test plan with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUpstreamRelationshipsTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        RelationshipDataListWrapper response = api.getUpstreamRelationships(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get the numbered version for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionOnItem4Test() throws ApiException {
        Integer versionNum = null;
        Integer id = null;
        List<String> include = null;
        VersionDataWrapper response = api.getVersionOnItem4(versionNum, id, include);

        // TODO: test validations
    }
    
    /**
     * Get the  snapshot of the test plan at the specified version
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionedItem4Test() throws ApiException {
        Integer versionNum = null;
        Integer id = null;
        List<String> include = null;
        VersionedTestPlanDataWrapper response = api.getVersionedItem4(versionNum, id, include);

        // TODO: test validations
    }
    
    /**
     * Get all versions for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionsOnItem4Test() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        VersionDataListWrapper response = api.getVersionsOnItem4(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Update the test plan with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchTestPlanTest() throws ApiException {
        List<RequestPatchOperation> body = null;
        Integer id = null;
        AbstractRestResponse response = api.patchTestPlan(body, id);

        // TODO: test validations
    }
    
    /**
     * Add an existing test case to the test group with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postTestCaseTest() throws ApiException {
        RequestTestGroupTestCase body = null;
        Integer testGroupId = null;
        Integer id = null;
        CreatedResponse response = api.postTestCase(body, testGroupId, id);

        // TODO: test validations
    }
    
    /**
     * Remove an existing attachment from the item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeAttachmentFromItemTest() throws ApiException {
        Integer attachmentId = null;
        Integer id = null;
        AbstractRestResponse response = api.removeAttachmentFromItem(attachmentId, id);

        // TODO: test validations
    }
    
    /**
     * Remove an existing tag from the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeTagFromItemTest() throws ApiException {
        Integer tagId = null;
        Integer id = null;
        AbstractRestResponse response = api.removeTagFromItem(tagId, id);

        // TODO: test validations
    }
    
    /**
     * Update the archived status of the test plan
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void toggleArchivedStatusTest() throws ApiException {
        RequestArchivedStatus body = null;
        Integer id = null;
        AbstractRestResponse response = api.toggleArchivedStatus(body, id);

        // TODO: test validations
    }
    
    /**
     * Update the link with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateItemLinkTest() throws ApiException {
        Integer linkId = null;
        RequestLink body = null;
        Integer id = null;
        AbstractRestResponse response = api.updateItemLink(linkId, body, id);

        // TODO: test validations
    }
    
    /**
     * Update the locked state of the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLockTest() throws ApiException {
        RequestLock body = null;
        Integer id = null;
        AbstractRestResponse response = api.updateLock(body, id);

        // TODO: test validations
    }
    
    /**
     * Update the test group with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTestGroupTest() throws ApiException {
        Integer testGroupId = null;
        RequestTestGroup body = null;
        Integer id = null;
        AbstractRestResponse response = api.updateTestGroup(testGroupId, body, id);

        // TODO: test validations
    }
    
    /**
     * Update the test plan with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTestPlanTest() throws ApiException {
        RequestTestPlan body = null;
        Integer id = null;
        AbstractRestResponse response = api.updateTestPlan(body, id);

        // TODO: test validations
    }
    
}
