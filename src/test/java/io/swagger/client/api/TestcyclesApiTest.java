/*
 * Jama REST API
 * This is the documentation for the Jama REST API.
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AbstractRestResponse;
import io.swagger.client.model.RequestPatchOperation;
import io.swagger.client.model.RequestTestCycle;
import io.swagger.client.model.TestCycleDataWrapper;
import io.swagger.client.model.TestCycleTestGroupDataWrapper;
import io.swagger.client.model.TestRunDataListWrapper;
import io.swagger.client.model.VersionDataListWrapper;
import io.swagger.client.model.VersionDataWrapper;
import io.swagger.client.model.VersionedTestCycleDataWrapper;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TestcyclesApi
 */
@Ignore
public class TestcyclesApiTest {

    private final TestcyclesApi api = new TestcyclesApi();

    
    /**
     * Delete the test cycle with the specified ID, including the test runs in the test cycle
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTestCycleTest() throws ApiException {
        Integer testCycleId = null;
        AbstractRestResponse response = api.deleteTestCycle(testCycleId);

        // TODO: test validations
    }
    
    /**
     * Get the test cycle with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestCycleTest() throws ApiException {
        Integer testCycleId = null;
        List<String> include = null;
        TestCycleDataWrapper response = api.getTestCycle(testCycleId, include);

        // TODO: test validations
    }
    
    /**
     * Get the test cycle test group for the test cycle with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestCycleTestGroupTest() throws ApiException {
        Integer testGroupId = null;
        Integer testCycleId = null;
        List<String> include = null;
        TestCycleTestGroupDataWrapper response = api.getTestCycleTestGroup(testGroupId, testCycleId, include);

        // TODO: test validations
    }
    
    /**
     * Get all test runs for the test cycle with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestRunsTest() throws ApiException {
        Integer testCycleId = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        TestRunDataListWrapper response = api.getTestRuns(testCycleId, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get the numbered version for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionOnItem3Test() throws ApiException {
        Integer versionNum = null;
        Integer testCycleId = null;
        List<String> include = null;
        VersionDataWrapper response = api.getVersionOnItem3(versionNum, testCycleId, include);

        // TODO: test validations
    }
    
    /**
     * Get the  snapshot of the test cycle at the specified version
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionedItem3Test() throws ApiException {
        Integer versionNum = null;
        Integer testCycleId = null;
        List<String> include = null;
        VersionedTestCycleDataWrapper response = api.getVersionedItem3(versionNum, testCycleId, include);

        // TODO: test validations
    }
    
    /**
     * Get all versions for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionsOnItem3Test() throws ApiException {
        Integer testCycleId = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        VersionDataListWrapper response = api.getVersionsOnItem3(testCycleId, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Update the test cycle with the specified ID, including regenerating the test runs in the test cycle
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchTestCycleTest() throws ApiException {
        List<RequestPatchOperation> body = null;
        Integer testCycleId = null;
        AbstractRestResponse response = api.patchTestCycle(body, testCycleId);

        // TODO: test validations
    }
    
    /**
     * Update the test cycle with the specified ID, including regenerating the test runs in the test cycle
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTestCycleTest() throws ApiException {
        RequestTestCycle body = null;
        Integer testCycleId = null;
        AbstractRestResponse response = api.updateTestCycle(body, testCycleId);

        // TODO: test validations
    }
    
}
