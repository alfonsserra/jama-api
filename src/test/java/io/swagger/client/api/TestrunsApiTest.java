/*
 * Jama REST API
 * This is the documentation for the Jama REST API.
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AbstractItemDataListWrapper;
import io.swagger.client.model.AbstractRestResponse;
import io.swagger.client.model.ActivityDataListWrapper;
import io.swagger.client.model.AttachmentDataListWrapper;
import io.swagger.client.model.CommentDataListWrapper;
import io.swagger.client.model.CreatedResponse;
import io.swagger.client.model.LinkDataListWrapper;
import io.swagger.client.model.LinkDataWrapper;
import io.swagger.client.model.LockDataWrapper;
import io.swagger.client.model.RelationshipDataListWrapper;
import io.swagger.client.model.RequestItemAttachment;
import io.swagger.client.model.RequestItemTag;
import io.swagger.client.model.RequestLink;
import io.swagger.client.model.RequestLock;
import io.swagger.client.model.RequestPatchOperation;
import io.swagger.client.model.RequestTestRun;
import io.swagger.client.model.TagDataListWrapper;
import io.swagger.client.model.TagDataWrapper;
import io.swagger.client.model.TestRunDataListWrapper;
import io.swagger.client.model.TestRunDataWrapper;
import io.swagger.client.model.VersionDataListWrapper;
import io.swagger.client.model.VersionDataWrapper;
import io.swagger.client.model.VersionedTestRunDataWrapper;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TestrunsApi
 */
@Ignore
public class TestrunsApiTest {

    private final TestrunsApi api = new TestrunsApi();

    
    /**
     * Add an existing attachment to the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addAttachmentToItemTest() throws ApiException {
        RequestItemAttachment body = null;
        Integer id = null;
        CreatedResponse response = api.addAttachmentToItem(body, id);

        // TODO: test validations
    }
    
    /**
     * Create a new link for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemLinkTest() throws ApiException {
        RequestLink body = null;
        Integer id = null;
        CreatedResponse response = api.addItemLink(body, id);

        // TODO: test validations
    }
    
    /**
     * Add an existing tag to the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTagToItemTest() throws ApiException {
        RequestItemTag body = null;
        Integer id = null;
        CreatedResponse response = api.addTagToItem(body, id);

        // TODO: test validations
    }
    
    /**
     * Delete the link with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemLinkTest() throws ApiException {
        Integer linkId = null;
        Integer id = null;
        AbstractRestResponse response = api.deleteItemLink(linkId, id);

        // TODO: test validations
    }
    
    /**
     * Delete the test run with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTestRunTest() throws ApiException {
        Integer id = null;
        AbstractRestResponse response = api.deleteTestRun(id);

        // TODO: test validations
    }
    
    /**
     * Get all activities for the test run with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getActivitiesTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        ActivityDataListWrapper response = api.getActivities(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get all attachments for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttachmentsTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        AttachmentDataListWrapper response = api.getAttachments(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get all downstream related items for the test run with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDownstreamRelatedTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        AbstractItemDataListWrapper response = api.getDownstreamRelated(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get all downstream relationships for the test run with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDownstreamRelationshipsTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        RelationshipDataListWrapper response = api.getDownstreamRelationships(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get all comments for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemCommentsTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        Boolean rootCommentsOnly = null;
        List<String> include = null;
        CommentDataListWrapper response = api.getItemComments(id, startAt, maxResults, rootCommentsOnly, include);

        // TODO: test validations
    }
    
    /**
     * Get all links for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemLinksTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        LinkDataListWrapper response = api.getItemLinks(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get the link with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLinkByIdTest() throws ApiException {
        Integer linkId = null;
        Integer id = null;
        List<String> include = null;
        LinkDataWrapper response = api.getLinkById(linkId, id, include);

        // TODO: test validations
    }
    
    /**
     * Get the locked state, last locked date, and last locked by user for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLockTest() throws ApiException {
        Integer id = null;
        List<String> include = null;
        LockDataWrapper response = api.getLock(id, include);

        // TODO: test validations
    }
    
    /**
     * Get the tag with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTagOnItemTest() throws ApiException {
        Integer tagId = null;
        Integer id = null;
        List<String> include = null;
        TagDataWrapper response = api.getTagOnItem(tagId, id, include);

        // TODO: test validations
    }
    
    /**
     * Get all tags for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTagsOnItemTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        TagDataListWrapper response = api.getTagsOnItem(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get the test run with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestRunTest() throws ApiException {
        Integer id = null;
        List<String> include = null;
        TestRunDataWrapper response = api.getTestRun(id, include);

        // TODO: test validations
    }
    
    /**
     * Search for test runs associated with test cases, test plans, an test cycles
     *
     * Must include at least one query parameter from testCycle, testCase, or testPlan
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestRunsTest() throws ApiException {
        List<Integer> testCycle = null;
        List<Integer> testCase = null;
        List<Integer> testPlan = null;
        List<String> sortBy = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        TestRunDataListWrapper response = api.getTestRuns(testCycle, testCase, testPlan, sortBy, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get all upstream related items for the test run with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUpstreamRelatedTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        AbstractItemDataListWrapper response = api.getUpstreamRelated(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get all upstream relationships for the test run with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUpstreamRelationshipsTest() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        RelationshipDataListWrapper response = api.getUpstreamRelationships(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Get the numbered version for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionOnItem5Test() throws ApiException {
        Integer versionNum = null;
        Integer id = null;
        List<String> include = null;
        VersionDataWrapper response = api.getVersionOnItem5(versionNum, id, include);

        // TODO: test validations
    }
    
    /**
     * Get the  snapshot of the test run at the specified version
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionedItem5Test() throws ApiException {
        Integer versionNum = null;
        Integer id = null;
        List<String> include = null;
        VersionedTestRunDataWrapper response = api.getVersionedItem5(versionNum, id, include);

        // TODO: test validations
    }
    
    /**
     * Get all versions for the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionsOnItem5Test() throws ApiException {
        Integer id = null;
        Integer startAt = null;
        Integer maxResults = null;
        List<String> include = null;
        VersionDataListWrapper response = api.getVersionsOnItem5(id, startAt, maxResults, include);

        // TODO: test validations
    }
    
    /**
     * Delete the current test run and then create a new test run based on the latest test case version.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void makeTestRunCurrentTest() throws ApiException {
        Integer id = null;
        CreatedResponse response = api.makeTestRunCurrent(id);

        // TODO: test validations
    }
    
    /**
     * Update the execution results for the test run with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchTestRunTest() throws ApiException {
        List<RequestPatchOperation> body = null;
        Integer id = null;
        AbstractRestResponse response = api.patchTestRun(body, id);

        // TODO: test validations
    }
    
    /**
     * Remove an existing attachment from the item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeAttachmentFromItemTest() throws ApiException {
        Integer attachmentId = null;
        Integer id = null;
        AbstractRestResponse response = api.removeAttachmentFromItem(attachmentId, id);

        // TODO: test validations
    }
    
    /**
     * Remove an existing tag from the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeTagFromItemTest() throws ApiException {
        Integer tagId = null;
        Integer id = null;
        AbstractRestResponse response = api.removeTagFromItem(tagId, id);

        // TODO: test validations
    }
    
    /**
     * Update the link with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateItemLinkTest() throws ApiException {
        Integer linkId = null;
        RequestLink body = null;
        Integer id = null;
        AbstractRestResponse response = api.updateItemLink(linkId, body, id);

        // TODO: test validations
    }
    
    /**
     * Update the locked state of the item with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLockTest() throws ApiException {
        RequestLock body = null;
        Integer id = null;
        AbstractRestResponse response = api.updateLock(body, id);

        // TODO: test validations
    }
    
    /**
     * Update the execution results for the test run with the specified ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTestRunTest() throws ApiException {
        RequestTestRun body = null;
        Integer id = null;
        AbstractRestResponse response = api.updateTestRun(body, id);

        // TODO: test validations
    }
    
}
